import project.Any.Any
import project.Data.Text.Text
import project.Error.Error
import project.Errors.Common.No_Such_Conversion
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.System.File.File
import project.System.File.Generic.File_Like.File_Like
import project.System.File_Format.File_Format
import project.System.File_Format_Metadata.File_Format_Metadata

polyglot java import java.io.FileNotFoundException
polyglot java import java.io.IOException
polyglot java import java.io.UncheckedIOException
polyglot java import java.nio.file.AccessDeniedException
polyglot java import java.nio.file.DirectoryNotEmptyException
polyglot java import java.nio.file.FileAlreadyExistsException
polyglot java import java.nio.file.FileSystemException
polyglot java import java.nio.file.NoSuchFileException
polyglot java import java.nio.file.NotDirectoryException

## Errors when reading or writing to a file.
type File_Error
    ## An error that indicates that the requested file does not exist.

       Arguments:
       - file: The file that doesn't exist.
    Not_Found (file : File_Like)

    ## Indicates that a destination file already exists.
    Already_Exists (file : File_Like)

    ## Indicates that the user did not have the permission to complete the
       requested operation on the given file.
    Access_Denied (file : File_Like)

    ## A generic IO error.

       Arguments:
       - file: The file that couldn't be read.
       - message: The message for the error.
    IO_Error (file : File_Like | Nothing) (message : Text)

    ## Indicates that the given directory was not empty, but `recursive` was not
       set to `True`.
    Directory_Not_Empty (file : File_Like)

    ## Indicates that the given path was expected to be a directory, but it is not.
       Raised for example when creating a new file or directory inside of a path
       that is a regular file.
    Not_A_Directory (file : File_Like)

    ## Indicates that the given file's type is not supported.
    Unsupported_Type (file : File_Format_Metadata)

    ## Indicates that the given type cannot be serialized to the provided file
       format.
    Unsupported_Output_Type (format : File_Format | File_Like | Any) (data_type : Any)

    ## Indicates that the given file is corrupted, i.e. the data it contains
       is not in the expected format.
    Corrupted_Format (file : File_Like | Nothing) (message : Text) (cause : Any | Nothing = Nothing)

    ## PRIVATE
       Convert the File error to a human-readable format.
    to_display_text : Text
    to_display_text self = case self of
        File_Error.Not_Found  file -> "The file at " + file.path + " does not exist."
        File_Error.IO_Error file msg ->
            suffix = if file.is_nothing then "" else " (" + file.path + ")."
            msg + suffix
        File_Error.Already_Exists file -> "The file at "+file.path+" already exists."
        File_Error.Access_Denied file -> "Insufficient permissions to perform the desired operation on the file at "+file.path+"."
        File_Error.Directory_Not_Empty file -> "The directory at "+file.path+" is not empty."
        File_Error.Not_A_Directory file -> "The file "+file.path+" is not a directory."
        File_Error.Unsupported_Type metadata -> "Could not recognize the type of file "+metadata.to_display_text+"."
        File_Error.Unsupported_Output_Type format data_type ->
            name_from_constructor =
                (Meta.meta format).constructor.name
            format_name = Panic.catch No_Such_Conversion (File_Like.from format . name) (_->name_from_constructor)
            "Values of type "+data_type.to_text+" cannot be written as format "+format_name.to_text+"."
        File_Error.Corrupted_Format file msg _ ->
            at_part = if file.is_nothing then "" else " at " + file.path
            "The file"+at_part+" is corrupted: " + msg

    ## PRIVATE

       Utility method for running an action with Java exceptions mapping.
    handle_java_exceptions (file : File | Nothing) ~action =
        handle_io_exception caught_panic =
            File_Error.wrap_io_exception file caught_panic.payload
        handle_unchecked_io_exception caught_panic =
            File_Error.wrap_io_exception file caught_panic.payload.getCause
        Panic.catch IOException handler=handle_io_exception <|
            Panic.catch UncheckedIOException handler=handle_unchecked_io_exception <|
                action

    ## PRIVATE
       Raises an error indicating that the user does not have permission to
       access the file in a given way.
    access_denied : File -> Nothing ! File_Error
    access_denied file = Error.throw (File_Error.Access_Denied file)

    ## PRIVATE
       Converts a Java `IOException` into its Enso counterpart.
    wrap_io_exception (file : File | Nothing) io_exception =
        associated_file = case io_exception of
            _ : FileSystemException ->
                path_from_exception = io_exception.getFile
                if path_from_exception.is_nothing then file else
                    File.new path_from_exception
            _ -> file

        ## If the file is not known, all we can do is throw a generic IO error.
           This will only usually matter on stream operations, where there is no relevant file -
           and so the exceptions like `NoSuchFileException` should not occur in such context.
           But instead of risking a Type_Error, we just throw the more generic IO_Error.
        if associated_file.is_nothing then Error.throw (File_Error.IO_Error Nothing "An IO error has occurred: "+io_exception.to_text) else case io_exception of
            _ : FileNotFoundException -> Error.throw (File_Error.Not_Found associated_file)
            _ : NoSuchFileException -> Error.throw (File_Error.Not_Found associated_file)
            _ : FileAlreadyExistsException -> Error.throw (File_Error.Already_Exists associated_file)
            _ : AccessDeniedException -> File_Error.access_denied associated_file
            _ : DirectoryNotEmptyException -> Error.throw (File_Error.Directory_Not_Empty associated_file)
            _ : NotDirectoryException -> Error.throw (File_Error.Not_A_Directory associated_file)
            _ -> Error.throw (File_Error.IO_Error associated_file "An IO error has occurred: "+io_exception.to_text)
