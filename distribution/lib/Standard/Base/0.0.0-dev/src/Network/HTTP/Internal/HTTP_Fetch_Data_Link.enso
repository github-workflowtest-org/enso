private

import project.Any.Any
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request.Request
import project.System.File.File_Access.File_Access
import project.System.File_Format.Auto_Detect
import project.System.Input_Stream.Input_Stream
from project.Enso_Cloud.Data_Link_Capabilities import Data_Link_With_Input_Stream
from project.Enso_Cloud.Data_Link_Helpers import parse_format, parse_secure_value
from project.Enso_Cloud.Public_Utils import get_optional_field, get_required_field

## PRIVATE
type HTTP_Fetch_Data_Link
    ## PRIVATE
    Value (request : Request) format_json

    ## PRIVATE
    parse json -> HTTP_Fetch_Data_Link =
        uri = get_required_field "uri" json expected_type=Text
        method = HTTP_Method.from (get_required_field "method" json expected_type=Text)
        format_json = get_optional_field "format" json
        # TODO headers
        headers = []
        request = Request.new method uri headers
        HTTP_Fetch_Data_Link.Value request format_json

    ## PRIVATE
    read self (format = Auto_Detect) (on_problems : Problem_Behavior) =
        _ = on_problems
        effective_format = if format != Auto_Detect then format else parse_format self.format_json
        response = HTTP.new.request self.request
        response.decode effective_format

    ## PRIVATE
    with_input_stream self (open_options : Vector) (action : Input_Stream -> Any) -> Any =
        File_Access.ensure_only_allowed_options "with_input_stream" [File_Access.Read] open_options <|
            response = HTTP.new.request self.request
            response.body.with_stream action

## PRIVATE
Data_Link_With_Input_Stream.from (that:HTTP_Fetch_Data_Link) = Data_Link_With_Input_Stream.Value that
