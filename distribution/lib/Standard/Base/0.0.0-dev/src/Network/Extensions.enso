import project.Any.Any
import project.Data
import project.Data.Pair.Pair
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Errors.Common.Syntax_Error
import project.Internal.Data_Read_Helpers
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.URI.URI
from project.System.File_Format import Auto_Detect, File_Format

## ALIAS parse_uri, uri from text
   GROUP Conversions
   ICON convert
   Convert Text to a URI.

   Throws a `Syntax_Error` when `self` cannot be parsed as a URI.

   > Example
     Parse URI text.

         import Standard.Base.Network.URI.Extensions

         example_parse = "http://example.com".to_uri
Text.to_uri : URI ! Syntax_Error
Text.to_uri self = URI.parse self

## ALIAS download, http get
   GROUP Input
   ICON data_input
   Fetches from the URI and returns the response, parsing the body if the
   content-type is recognised. Returns an  error if the status code does not
   represent a successful response.

   Arguments:
   - method: The HTTP method to use. Must be one of `HTTP_Method.Get`,
     `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.
     Defaults to `HTTP_Method.Get`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - format: The format to use for interpreting the response.
     Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format
     cannot be determined automatically, a raw HTTP `Response` will be returned.
@format Data_Read_Helpers.format_widget_with_raw_response
URI.fetch : HTTP_Method -> Vector (Header | Pair Text Text) -> File_Format -> Any
URI.fetch self (method:HTTP_Method=HTTP_Method.Get) headers=[] format=Auto_Detect =
    Data.fetch self method headers format

## ALIAS http post, upload
   GROUP Output
   ICON data_upload
   Writes the provided data to the provided URI. Returns the response,
   parsing the body if the content-type is recognised. Returns an  error if the
   status code does not represent a successful response.

   Arguments:
   - body: The data to write. See `Supported Body Types` below.
   - method: The HTTP method to use. Must be one of `HTTP_Method.Post`,
     `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - response_format: The format to use for interpreting the response.
     Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format
     cannot be determined automatically, a raw HTTP `Response` will be returned.

   ! Specifying Content Types

     If the `body` parameter specifies an explicit content type, then it is an
     error to also specify additional `Content-Type` headers in the `headers`
     parameter. (It is not an error to specify multiple `Content-Type` values in
     `headers`, however.)

   ! Supported Body Types

     - Request_Body.Text: Sends a text string, with optional encoding and content
       type.
     - Request_Body.Json: Sends an Enso object, after converting it to JSON.
     - Request_Body.Binary: Sends a file.
     - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys
       must be `Text`, and the values must be `Text` or `File`.
     - Request_Body.Empty: Sends an empty body.

     Additionally, the following types are allowed as the `body` parameter:

     - Text: shorthand for `Request_Body.Text that_text`.
     - File: shorthand for `Request_Body.Binary that_file`.
     - Any other Enso object: shorthand for `Request_Body.Json that_object`.
@response_format Data_Read_Helpers.format_widget_with_raw_response
URI.post : Request_Body -> HTTP_Method -> Vector (Header | Pair Text Text) -> File_Format -> Any
URI.post self (body:Request_Body=Request_Body.Empty) (method:HTTP_Method=HTTP_Method.Post) (headers:(Vector (Header | Pair Text Text))=[]) (response_format = Auto_Detect) =
    Data.post self body method headers response_format
