private

import project.Data.Json.JS_Object
import project.Data.Map.Map
import project.Data.Text.Text
import project.Data.Text.Text_Sub_Range.Text_Sub_Range
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Vector.Vector
import project.Enso_Cloud.Cloud_Caching_Settings
import project.Enso_Cloud.Enso_File.Enso_Asset_Type
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Enso_User.Enso_User
import project.Enso_Cloud.Internal.Utils
import project.Error.Error
import project.Errors.Common.Not_Found
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Unimplemented.Unimplemented
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Runtime.Context
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Public_Utils import get_required_field

## PRIVATE
   Currently, most of the Cloud API relies on asset IDs and not paths.
   This object is a proxy for an existing asset within the cloud - whenever we
   perform an operation that operates on IDs, we can fetch this helper and then
   use it to perform the operation.
type Existing_Enso_Asset
    ## PRIVATE
       Represents an existing asset within the Enso cloud.
    Value title:Text id:Text asset_type:Enso_Asset_Type

    ## PRIVATE
       Target URI for the api
    internal_uri self -> Text = case self.id of
        "" -> if self.asset_type == Enso_Asset_Type.Directory then Utils.directory_api else
            Error.throw (Illegal_Argument.Error "Invalid ID for a "+self.asset_type.to_text+".")
        _ -> case self.asset_type of
            Enso_Asset_Type.Directory -> Utils.directory_api + "/" + self.id
            Enso_Asset_Type.File -> Utils.files_api + "/" + self.id
            Enso_Asset_Type.Project -> Utils.projects_api + "/" + self.id
            Enso_Asset_Type.Data_Link -> Utils.datalinks_api + "/" + self.id
            Enso_Asset_Type.Secret -> Error.throw (Illegal_Argument.Error "Secrets cannot be accessed directly.")

    ## PRIVATE
    asset_uri self -> Text = Utils.assets_api + "/" + self.id

    ## PRIVATE
    name self -> Text =
        added_extension = case self.asset_type of
            # TODO enable when using new path resolver that should support these
            #Enso_Asset_Type.Data_Link -> ".datalink"
            #Enso_Asset_Type.Secret -> ".secret"
            #Enso_Asset_Type.Project -> ".enso"
            _ -> ""
        self.title + added_extension

    ## PRIVATE
       Fetches the basic information about a file from the Cloud endpoint.
    get_file_description self -> JS_Object =
        Utils.http_request_as_json HTTP_Method.Get self.internal_uri

    ## PRIVATE
       The returned URL may be valid only for a very short time, so it should not be
       stored anywhere.
    get_download_url self -> Text =
        presigned_url = self.get_file_description |> get_required_field "url" expected_type=Text
        presigned_url

    ## PRIVATE
       Fetches the basic information about an existing file from the Cloud.
       It will fail if the file does not exist.
    get_asset_reference_for (file : Enso_File) -> Existing_Enso_Asset ! File_Error =
        fetch_asset_reference file

    ## PRIVATE
       Resolves a path to an existing asset in the cloud.
    resolve_path (path : Text) ~if_not_found =
        handle_not_found _ = if_not_found
        error_handlers = Map.from_vector [["resource_missing", handle_not_found]]

        uri = Utils.cloud_root_uri+"path/resolve"
        payload = JS_Object.from_pairs [["path", path]]

        # TODO remove workaround - this should be a Get endpoint, not Post
        response = Context.Output.with_enabled <|
            Utils.http_request_as_json HTTP_Method.Post uri payload error_handlers=error_handlers
        Existing_Enso_Asset.from_json response

    ## PRIVATE
    is_directory self = self.asset_type == Enso_Asset_Type.Directory

    ## PRIVATE
    is_regular_file self = self.asset_type == Enso_Asset_Type.File

    ## PRIVATE
    list_directory self =
        if self.asset_type != Enso_Asset_Type.Directory then Error.throw (Illegal_Argument.Error "Only directories can be listed.") else
             response = Utils.http_request_as_json HTTP_Method.Get self.internal_uri
             assets = get_required_field "assets" response expected_type=Vector
             assets.map Existing_Enso_Asset.from_json

    ## PRIVATE
    from_json json =
        title = get_required_field "title" json expected_type=Text
        id = get_required_field "id" json expected_type=Text
        #org = json.get "organizationId" ""
        asset_type = (id.take (Text_Sub_Range.Before "-")):Enso_Asset_Type
        Existing_Enso_Asset.Value title id asset_type


## PRIVATE
type Asset_Cache
    asset_prefix = "asset:"

    asset_key (file : Enso_File) -> Text = Asset_Cache.asset_prefix+file.enso_path.to_text

    ## PRIVATE
    invalidate (file : Enso_File) =
        Utils.invalidate_cache (Asset_Cache.asset_key file)

    invalidate_subtree (file : Enso_File) =
        Utils.invalidate_caches_with_prefix (Asset_Cache.asset_key file)

    invalidate_all =
        Utils.invalidate_caches_with_prefix Asset_Cache.asset_prefix

    update (file : Enso_File) (asset : Existing_Enso_Asset) =
        Utils.set_cached (Asset_Cache.asset_key file) asset cache_duration=Cloud_Caching_Settings.get_file_cache_ttl

## PRIVATE
   Returns the cached reference or fetches it from the cloud.
fetch_asset_reference (file : Enso_File) -> Existing_Enso_Asset ! File_Error =
    # TODO remove workaround for bug https://github.com/enso-org/cloud-v2/issues/1173
    path = if file.enso_path.is_root then file.enso_path.to_text + "/" else file.enso_path.to_text
    Utils.get_cached (Asset_Cache.asset_key file) cache_duration=Cloud_Caching_Settings.get_file_cache_ttl <|
        Existing_Enso_Asset.resolve_path path if_not_found=(Error.throw (File_Error.Not_Found file))
