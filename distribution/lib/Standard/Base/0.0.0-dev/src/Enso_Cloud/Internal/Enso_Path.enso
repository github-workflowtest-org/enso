private

import project.Data.Index_Sub_Range.Index_Sub_Range
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_File.Enso_File
import project.Enso_Cloud.Enso_User.Enso_User
import project.Error.Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Unimplemented.Unimplemented
import project.Internal.Path_Helpers
import project.Nothing.Nothing
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all

## PRIVATE
   UNSTABLE
   This is a helper for handling `enso://` paths.
type Enso_Path
    ## PRIVATE
    Value (organization_name : Text) (path_segments : Vector Text)

    ## PRIVATE
    parse (path : Text) -> Enso_Path =
        if path.starts_with Enso_Path.protocol_prefix . not then Error.throw (Illegal_Argument.Error "Invalid path - it should start with `enso://`.") else
            raw_segments = path.drop Enso_Path.protocol_prefix.length . split Enso_Path.delimiter
            if raw_segments.is_empty then Error.throw (Illegal_Argument.Error "Invalid path - it should contain at least one segment.") else
                organization_name = raw_segments.first
                if organization_name.is_empty then Error.throw (Illegal_Argument.Error "Invalid path - organization name cannot be empty.") else
                    segments = raw_segments.drop 1 . filter s-> s.is_empty.not
                    normalized = normalize segments
                    Enso_Path.Value organization_name normalized

    ## PRIVATE
    root_for (organization_name : Text) =
        Enso_Path.Value organization_name []

    ## PRIVATE
    is_root self -> Boolean =
        self.path_segments.is_empty

    ## PRIVATE
    parent self -> Enso_Path =
        if self.is_root then Error.throw (Illegal_Argument.Error "Cannot get parent of the root directory.") else
            Enso_Path.Value self.organization_name (self.path_segments.drop (Index_Sub_Range.Last 1))

    ## PRIVATE
    resolve self (subpath : Text) -> Enso_Path =
        new_segments = subpath.split Enso_Path.delimiter . filter (p-> p.is_empty.not)
        normalized_segments = normalize (self.path_segments + new_segments)
        Enso_Path.Value self.organization_name normalized_segments

    ## PRIVATE
    is_descendant_of self (other : Enso_Path) -> Boolean =
        if self.organization_name != other.organization_name then False else
            if self.path_segments.length < other.path_segments.length then False else
                (self.path_segments.take other.path_segments.length) == other.path_segments

    ## PRIVATE
    to_text self -> Text =
        Enso_Path.protocol_prefix + self.organization_name + Enso_Path.delimiter + self.path_segments.join Enso_Path.delimiter

    ## PRIVATE
    delimiter = "/"

    ## PRIVATE
    protocol_prefix = "enso://"

## PRIVATE
normalize segments =
    Path_Helpers.normalize_segments segments (x->x)
