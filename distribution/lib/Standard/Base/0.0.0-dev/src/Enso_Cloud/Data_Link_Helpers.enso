# Helper methods useful for implementors of data link types.

import project.Any.Any
import project.Data.Json.JS_Object
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Data_Link.Data_Link
import project.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Enso_Cloud.Errors.Missing_Data_Link_Library
import project.Error.Error
import project.Errors.Common.No_Such_Conversion
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Errors.Unimplemented.Unimplemented
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.System.File.Data_Link_Access.Data_Link_Access
import project.System.File.File
import project.System.File.File_Access.File_Access
import project.System.File.Generic.File_Like.File_Like
import project.System.File.Generic.Writable_File.Writable_File
import project.System.File_Format.Auto_Detect
import project.System.File_Format.Infer
import project.System.File_Format.JSON_Format
import project.System.File_Format_Metadata.Content_Type_Metadata
import project.System.File_Format_Metadata.File_Format_Metadata
import project.System.Input_Stream.Input_Stream
import project.System.Output_Stream.Output_Stream
from project.Data.Boolean import Boolean, False, True
from project.Data.Text.Extensions import all
from project.Enso_Cloud.Data_Link_Capabilities import Data_Link_With_Input_Stream, Data_Link_With_Output_Stream, Writable_Data_Link
from project.Enso_Cloud.Public_Utils import get_required_field

polyglot java import org.enso.base.enso_cloud.DataLinkSPI
polyglot java import org.enso.base.file_format.FileFormatSPI


## PRIVATE
   All data-link config files should be saved with UTF-8 encoding.
data_link_encoding = Encoding.utf_8

## PRIVATE
data_link_content_type = "application/x-enso-datalink"

## PRIVATE
data_link_extension = ".datalink"

## PRIVATE
interpret_json_as_data_link json =
    typ = get_required_field "type" json expected_type=Text
    case DataLinkSPI.findDataLinkType typ of
        Nothing ->
            library_name = get_required_field "libraryName" json expected_type=Text
            Error.throw (Missing_Data_Link_Library.Error library_name typ)
        data_link_type ->
            data_link_type.parse json

## PRIVATE
read_data_link (file : File_Like) format (on_problems : Problem_Behavior) =
    json = Data_Link.read_config file
    data_link_instance = interpret_json_as_data_link json
    data_link_instance.read format on_problems

## PRIVATE
read_data_link_as_stream (file : File_Like) (open_options : Vector) (f : Input_Stream -> Any) =
    json = Data_Link.read_config file
    data_link_instance = interpret_json_as_data_link json
    data_link_with_input_stream = Data_Link_With_Input_Stream.find data_link_instance
    data_link_with_input_stream.with_input_stream open_options f

## PRIVATE
write_data_link_as_stream (file : File_Like) (open_options : Vector) (f : Output_Stream -> Any) =
    json = Data_Link.read_config file
    data_link_instance = interpret_json_as_data_link json
    data_link_with_output_stream = Data_Link_With_Output_Stream.find data_link_instance
    data_link_with_output_stream.with_output_stream open_options f

## PRIVATE
interpret_data_link_as_writable_file (file : File_Like) -> Writable_File =
    json = Data_Link.read_config file
    data_link_instance = interpret_json_as_data_link json
    ## We override the return value to return the original datalink, not the target.
       Ideally, we'd do this inside of the `as_writable_file` implementation,
       but there the data link does not know its 'origin', so it is impossible
       to override it there.
    Writable_Data_Link.find data_link_instance . as_writable_file
        . with_overridden_return file.underlying

## PRIVATE
save_data_link_to_file data_link_instance (target_file : Writable_File) =
    data_link_with_input_stream = Data_Link_With_Input_Stream.find data_link_instance if_not_supported=(Error.throw (Illegal_Argument.Error "The "+(data_link_name data_link_instance)+" cannot be saved to a file."))
    data_link_with_input_stream.with_input_stream [File_Access.Read] input_stream->
        input_stream.write_to_file target_file

## PRIVATE
parse_secure_value json -> Text | Enso_Secret =
    case json of
        raw_text : Text -> raw_text
        _ : JS_Object ->
            case get_required_field "type" json expected_type=Text of
                "secret" ->
                    secret_path = get_required_field "secretPath" json expected_type=Text
                    Enso_Secret.get secret_path
                other -> Error.throw (Illegal_State.Error "Unexpected value inside of a data-link: "+other+".")
        _ -> Error.throw (Illegal_State.Error "Parsing a secure value failed. Expected either a string or an object representing a secret, but got "+(Meta.type_of json . to_display_text)+".")

## PRIVATE
parse_format (json : Any) -> Any ! Illegal_State = case json of
    Nothing -> Auto_Detect
    _ : JS_Object -> case get_required_field "subType" json of
        "default" -> Auto_Detect
        sub_type : Text ->
            format_type = FileFormatSPI.findFormatForDataLinkSubType sub_type
            if format_type.is_nothing then Error.throw (Illegal_State.Error "Unknown format inside of a datalink: "+sub_type+". Perhaps the library providing that format needs to be imported?") else
                format_type.from json
        other ->
            Error.throw (Illegal_State.Error "Expected `subType` to be a string, but got: "+other.to_display_text+".")
    other -> Error.throw (Illegal_State.Error "Unexpected value inside of a data-link `format` field: "+other.to_display_text+".")

## PRIVATE
   Returns a human readable name of the data link type, based on its type.
data_link_name data_link_instance =
    Meta.type_of data_link_instance . to_display_text . replace "_" " "

## PRIVATE
disallow_links_in_copy source target ~action =
    is_source_data_link = Data_Link.is_data_link source
    is_target_data_link = Data_Link.is_data_link target
    if is_source_data_link && is_target_data_link then Error.throw (Illegal_Argument.Error "The `copy_to` operation cannot be used with data links. If you want to copy links, use `Data_Link.copy`. If you want to copy the contents, `.read` the data link and then write the data to the destination using the appropriate method.") else
        if is_source_data_link || is_target_data_link then Error.throw (Illegal_Argument.Error "The `copy_to` operation cannot be used with data links. Please `.read` the data link and then write the data to the destination using the appropriate method.") else
            action

## PRIVATE
disallow_links_in_move source target ~action =
    is_source_data_link = Data_Link.is_data_link source
    is_target_data_link = Data_Link.is_data_link target
    if is_source_data_link && is_target_data_link then Error.throw (Illegal_Argument.Error "The `move_to` operation cannot be used with data links. If you want to move the link, use `Data_Link.move`.") else
        if is_source_data_link || is_target_data_link then Error.throw (Illegal_Argument.Error "The `move_to` operation cannot be used with data links. Please `.read` the data link and then write the data to the destination using the appropriate method.") else
            action
