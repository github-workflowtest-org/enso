import project.Data.Locale.Locale
import project.Data.Numbers.Number
import project.Data.Time.Date.Date
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Date_Time_Formatter.Date_Time_Formatter
import project.Data.Time.Time_Of_Day.Time_Of_Day
import project.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Meta
import project.Metadata.Widget
from project.Data.Boolean import Boolean, False, True
from project.Metadata import make_single_choice
from project.Metadata.Choice import Option

## PRIVATE
   Creates a Single_Choice Widget for text or secret value.
make_text_secret_selector : Widget
make_text_secret_selector =
    fqn = Meta.get_qualified_type_name Enso_Secret
    make_single_choice [['<Text Value>', '""'], ['<Secret Value>', fqn+".get"]]

## PRIVATE
   Creates a Regex / Text Widget for search and replace.
make_regex_text_widget : Widget
make_regex_text_widget =
    make_single_choice [["<Text Value>", '""'], ["<Regular Expression>", '(regex "^$")']]

## PRIVATE
   Creates a Single_Choice Widget for delimiters.
make_delimiter_selector : Widget
make_delimiter_selector =
    make_single_choice [',', ';', '|', ['{tab}', "'\t'"], ['{space}', "' '"], ['{newline}', "['\n', '\r\n', '\r']"], '_', ['Custom', "'?'"]]

## PRIVATE
   Creates a Single_Choice Widget for file read delimiters.
make_file_read_delimiter_selector : Widget
make_file_read_delimiter_selector =
    make_single_choice [',', ';', '|', ['{tab}', "'\t'"], ['{space}', "' '"], ['{none}', "''"], '_', ['Custom', "'?'"]]

## PRIVATE
   Creates a Single_Choice Widget for formatting decimals.
make_number_format_selector : Number -> Widget
make_number_format_selector (value:Number=1234.564321) =
    formats = ['0', '#,##0', '#,##0.00', '#,##0.00##', '#,##0.00;(#,##0.00)', '0.####', '0.######E0']
    mapped_formats = formats.map f-> [f + " (e.g. " + (value.format f) + ")", f.pretty]
    make_single_choice mapped_formats

## PRIVATE
   Creates a Single_Choice Widget for parsing dates.
make_date_format_selector : Date -> Widget
make_date_format_selector (date:Date=(Date.new 2012 3 14)) =
    fqn = Meta.get_qualified_type_name Date_Time_Formatter
    iso_format = ['ISO-Format (e.g. ' + date.format Date_Time_Formatter.iso_date + ')', fqn+".iso_date"]
    formats = ['d/M/yyyy', 'dd/MM/yyyy', 'd-MMM-yy', 'd MMMM yyyy', 'M/d/yyyy', 'MM/dd/yyyy', 'MMMM d, yyyy', 'yyyy-MM'].map f->
        [f + " (e.g. " + date.format f + ")", f.pretty]
    custom_locale_format =
        format = Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy' locale=Locale.france
        label = 'd MMMM yyyy - with custom Locale (e.g. ' + date.format format + ')'
        code = "(Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy' locale=Locale.france)"
        Option label code [["pattern", make_single_choice formats], ["locale", Locale.default_widget]]
    week_date_formats = ['YYYY-ww-d', 'YYYY-ww', 'ddd, YYYY-ww'].map f->
        format = Date_Time_Formatter.from_iso_week_date_pattern f
        ["ISO Week-based Date: " + f + " (e.g. " + date.format format + ")", "("+fqn+".from_iso_week_date_pattern " + f.pretty + ")"]

    make_single_choice ([iso_format] + formats + [custom_locale_format] + week_date_formats)

## PRIVATE
   Creates a Single_Choice Widget for parsing date times.
make_date_time_format_selector : Date_Time -> Widget
make_date_time_format_selector (date_time:Date_Time=(Date_Time.new 2012 3 14 15 9 26 123)) =
    fqn = Meta.get_qualified_type_name Date_Time_Formatter
    enso_format =
        format = Date_Time_Formatter.default_enso_zoned_date_time
        ['Default (e.g. ' + date_time.format format + ')', fqn+".default_enso_zoned_date_time"]
    iso_format =
        format = Date_Time_Formatter.iso_zoned_date_time
        ['ISO-Format (e.g. ' + (date_time.format format) + ')', fqn+".iso_zoned_date_time"]
    iso_local =
        format = Date_Time_Formatter.iso_local_date_time
        ['ISO-Local (e.g. ' + (date_time.format format) + ')', fqn+".iso_local_date_time"]
    formats = ['yyyy-MM-dd HH:mm:ss.f', 'yyyy-MM-dd HH:mm:ss.f TT', 'd/M/yyyy h:mm a', 'dd/MM/yyyy HH:mm:ss', 'd-MMM-yy HH:mm:ss', 'd-MMM-yy h:mm:ss a', 'd MMMM yyyy h:mm a', 'M/d/yyyy h:mm:ss a', 'MM/dd/yyyy HH:mm:ss']
    mapped_formats = formats.map f-> [f + " (e.g. " + date_time.format f + ")", f.pretty]
    custom_locale_format =
        format = Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy HH:mm' locale=Locale.france
        label = 'd MMMM yyyy HH:mm - with custom Locale (e.g. ' + date_time.format format + ')'
        code = "(Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy HH:mm' locale=Locale.france)"
        Option label code [["pattern", make_single_choice mapped_formats], ["locale", Locale.default_widget]]
    week_date_formats = ['YYYY-ww-d HH:mm:ss.f'].map f->
        format = Date_Time_Formatter.from_iso_week_date_pattern f
        ["ISO Week-based Date-Time: " + f + " (e.g. " + date_time.format format + ")", "(Date_Time_Formatter.from_iso_week_date_pattern " + f.pretty + ")"]

    make_single_choice ([enso_format, iso_format, iso_local] + mapped_formats + [custom_locale_format] + week_date_formats)

## PRIVATE
   Creates a Single_Choice Widget for parsing times.
make_time_format_selector : Time_Of_Day -> Widget
make_time_format_selector (time:Time_Of_Day=(Time_Of_Day.new 13 30 55 123)) =
    fqn = Meta.get_qualified_type_name Date_Time_Formatter
    iso_format = ['ISO-Format (e.g. ' + time.format Date_Time_Formatter.iso_time + ')', fqn+".iso_time"]
    formats = ['HH:mm[:ss]', 'HH:mm:ss', 'h:mm[:ss] a', 'hh:mm:ss a', 'HH:mm:ss.S'].map f->
        [f + " (e.g. " + time.format f + ")", f.pretty]

    make_single_choice ([iso_format] + formats)

## PRIVATE
   Create a Single_Choice Widget for selecting a format value.
make_format_chooser : Boolean -> Boolean -> Boolean -> Boolean -> Boolean -> Widget
make_format_chooser include_number:Boolean=True include_date:Boolean=True include_date_time:Boolean=True include_time:Boolean=True include_boolean:Boolean=True =
    numeric = if include_number.not then [] else
        ['0', '#,##0', '#,##0.00', '#,##0.00;(#,##0.00)'].map f-> [f + " (e.g. " + (1234.5678.format f) + ")", f.pretty]
    date = if include_date.not then [] else
        ['d/M/yyyy', 'dd/MM/yyyy', 'M/d/yyyy', 'MM/dd/yyyy', 'd-MMM-yy', 'd MMMM yyyy'].map f-> [f + " (e.g. " + (Date.new 2012 3 14).format f + ")", f.pretty]
    date_time = if include_date_time.not then [] else
        ['yyyy-MM-dd HH:mm:ss.f', 'yyyy-MM-dd HH:mm:ss.f TT', 'd/M/yyyy h:mm a', 'dd/MM/yyyy HH:mm:ss', 'MM/dd/yyyy HH:mm:ss'].map f-> [f + " (e.g. " + (Date_Time.new 2012 3 14 15 9 26 123).format f + ")", f.pretty]
    custom_locale_format =
        format = Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy HH:mm' locale=Locale.france
        label = 'd MMMM yyyy HH:mm - with custom Locale (e.g. ' + Date_Time.now.format format + ')'
        code = "(Date_Time_Formatter.from_simple_pattern 'd MMMM yyyy HH:mm' locale=Locale.france)"
        [Option label code [["pattern", make_single_choice (date+date_time)], ["locale", Locale.default_widget]]]
    time = if include_time.not then [] else
        ['HH:mm[:ss]', 'h:mm[:ss] a'].map f-> [f + " (e.g. " + (Time_Of_Day.new 13 30 55 123).format f + ")", f.pretty]
    boolean = if include_boolean.not then [] else ['Yes|No', '1|0'].map f-> [f + " (Boolean)", f.pretty]
    make_single_choice (numeric + date + date_time + time + custom_locale_format + boolean)
