from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
from Standard.Base.Enso_Cloud.Enso_Secret import as_hideable_value
from Standard.Base.Metadata import make_single_choice, Widget

import project.AWS_Region.AWS_Region

polyglot java import org.enso.aws.AwsCredential
polyglot java import org.enso.aws.ClientBuilder
polyglot java import org.enso.aws.ProfileReader

type AWS_Credential
    ## Access AWS using the default credential method.
    Default

    ## Access using IAM via an AWS profile.

       Arguments:
       - profile: AWS profile name (if empty uses default).
    @profile (make_single_choice AWS_Credential.profile_names)
    Profile profile:Text='default'

    ## Access using IAM via an AWS access key ID and secret access key.

       Arguments:
       - access_key_id: AWS access key ID.
       - secret_access_key: AWS secret access key.
    Key access_key_id:Text|Enso_Secret secret_access_key:Text|Enso_Secret

    ## PRIVATE
       Allows to override additional configuration associated with the credential.

       Arguments:
       - base_credential: The base credential to use. It should be one of:
         Default, Profile, Key.
       - default_region: The default region to use for operations that may
         require a region but it is not explicitly specified.
    With_Configuration (base_credential : AWS_Credential) (default_region : AWS_Region)

    ## Get a list of the available profiles
    profile_names : Vector Text
    profile_names = Vector.from_polyglot_array <|
        ProfileReader.INSTANCE.getProfiles

    ## PRIVATE
       Generates a Java representation of the credential.

       Note that this ignores the additional properties that may be set by
       `With_Configuration` constructor. These are expected to be handled
       separately.
    as_java : AwsCredential
    as_java self = case self of
        AWS_Credential.Default -> AwsCredential.Default.new
        AWS_Credential.Profile profile -> AwsCredential.Profile.new profile
        AWS_Credential.Key access_key_id secret_access_key ->
            AwsCredential.Key.new (as_hideable_value access_key_id) (as_hideable_value secret_access_key)
        AWS_Credential.With_Configuration base_credential _ ->
            base_credential.as_java

    ## Sets the default region for operations that need it but do not specify it
       explicitly.
    @region AWS_Region.default_widget
    with_default_region self (region : AWS_Region) -> AWS_Credential = case self of
        AWS_Credential.With_Configuration base_credential _ ->
            AWS_Credential.With_Configuration base_credential region
        _ -> AWS_Credential.With_Configuration self region

    ## PRIVATE
    get_default_region self -> AWS_Region = case self of
        AWS_Credential.With_Configuration _ default_region -> default_region
        AWS_Credential.Profile profile_name ->
            AWS_Region.Default_With_Profile profile_name
        _ -> AWS_Region.Default

    ## PRIVATE
       ADVANCED
       A helper method that checks if default AWS credentials are available.
       This method returns `True` if and only if the `AWS_Credential.Default`
       will be able to resolve to some credentials. If this method returns
       `False`, operations relying on `AWS_Credential.Default` will fail.
    is_default_credential_available -> Boolean =
        ClientBuilder.isDefaultCredentialAvailable

    ## PRIVATE
       ADVANCED
       Runs the action with the default credentials overridden.

       This method is mainly meant to be used for testing, but it can also be
       used by users if they do not have means to override the default
       credentials in their environment.
    with_default_override (override : AWS_Credential) ~action =
        previous = Illegal_Argument.handle_java_exception <|
            ClientBuilder.setDefaultCredentialOverride override.as_java
        Panic.with_finalizer (ClientBuilder.setDefaultCredentialOverride previous) action

    ## PRIVATE
    to_text self -> Text = case self of
        AWS_Credential.Default -> "AWS_Credential.Default"
        AWS_Credential.Profile profile -> "AWS_Credential.Profile " + profile
        AWS_Credential.Key _ _ -> "AWS_Credential.Key"
        AWS_Credential.With_Configuration base_credential region ->
            base_credential.to_text + "(" + region.to_text + ")"

    ## PRIVATE
    to_display_text self -> Text = self.to_text.to_display_text
