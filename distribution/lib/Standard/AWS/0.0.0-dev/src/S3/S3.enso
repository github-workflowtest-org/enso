from Standard.Base import all
import Standard.Base.Network.HTTP.Response_Body.Response_Body
import Standard.Base.System.File_Format_Metadata.File_Format_Metadata
import Standard.Base.System.Input_Stream.Input_Stream
from Standard.Base.Network.HTTP.Response import filename_from_content_disposition

import project.AWS_Credential.AWS_Credential
import project.Errors.AWS_SDK_Error
import project.Errors.More_Records_Available
import project.Errors.S3_Bucket_Not_Found
import project.Errors.S3_Error
import project.Errors.S3_Key_Not_Found
import project.Internal.Request_Body

polyglot java import java.io.IOException
polyglot java import org.enso.aws.BucketLocator
polyglot java import org.enso.aws.ClientBuilder
polyglot java import software.amazon.awssdk.core.exception.SdkClientException
polyglot java import software.amazon.awssdk.services.s3.model.CopyObjectRequest
polyglot java import software.amazon.awssdk.services.s3.model.DeleteObjectRequest
polyglot java import software.amazon.awssdk.services.s3.model.GetObjectRequest
polyglot java import software.amazon.awssdk.services.s3.model.HeadBucketRequest
polyglot java import software.amazon.awssdk.services.s3.model.HeadObjectRequest
polyglot java import software.amazon.awssdk.services.s3.model.ListObjectsV2Request
polyglot java import software.amazon.awssdk.services.s3.model.NoSuchBucketException
polyglot java import software.amazon.awssdk.services.s3.model.NoSuchKeyException
polyglot java import software.amazon.awssdk.services.s3.model.PutObjectRequest
polyglot java import software.amazon.awssdk.services.s3.model.S3Exception
polyglot java import software.amazon.awssdk.services.s3.S3Client

## ICON data_input
   Gets the list of the S3 bucket names.

   Arguments:
   - credentials: AWS credentials. If not provided, the default credentials will
     be used.
list_buckets : AWS_Credential -> Vector Text ! S3_Error
list_buckets credentials:AWS_Credential=AWS_Credential.Default = handle_s3_errors <|
    client = make_client credentials
    buckets = client.listBuckets.buckets
    buckets.map b->b.name

## GROUP Standard.Base.Input
   ICON data_input
   Gets the list of the items inside a bucket.

   Arguments:
   - bucket: the name of the bucket.
   - prefix: the prefix of keys to match.
   - max_count: the maximum number of items to return. The default is 1000.
   - credentials: AWS credentials. If not provided, the default credentials will
     be used.
list_objects : Text -> Text -> AWS_Credential -> Integer -> Vector Text ! S3_Error
list_objects bucket prefix="" credentials:AWS_Credential=AWS_Credential.Default max_count=1000 =
    read_bucket bucket prefix credentials delimiter="" max_count=max_count . second

## PRIVATE
   Reads an S3 bucket returning a pair of vectors, one with common prefixes and
   one with object keys.

   Arguments:
   - bucket: The name of the bucket.
   - prefix: The prefix to use when searching for keys to return.
   - credentials: The credentials for the AWS resource.
   - delimiter: The delimiter used to deduce common prefixes.
read_bucket : Text -> Text -> AWS_Credential -> Integer -> Text -> Pair Vector Vector ! S3_Error
read_bucket bucket prefix="" credentials:AWS_Credential=AWS_Credential.Default delimiter="/" max_count=1000 = handle_s3_errors bucket=bucket <|
    client = make_client_for_bucket bucket credentials

    per_request = Math.min max_count 1000
    request = ListObjectsV2Request.builder.bucket bucket . maxKeys per_request . delimiter delimiter . prefix prefix . build

    iterator request count current prefixes first =
        response = client.listObjectsV2 request

        if response.is_error then response else
            ## Note the AWS API does not limit the count of common prefixes.
            common_prefixes = if first then response.commonPrefixes.map _.prefix else prefixes
            result = current + (response.contents.map _.key)

            if response.isTruncated.not then Pair.new common_prefixes result else
                new_count = count + result.length
                if new_count >= max_count then (Warning.attach (More_Records_Available.Warning "Not all keys returned. Additional objects found.") (Pair.new common_prefixes result)) else
                    new_items = Math.min (Math.max 0 max_count-new_count) 1000
                    new_request = request.toBuilder.continuationToken response.nextContinuationToken . maxKeys new_items . build
                    @Tail_Call iterator new_request new_count result common_prefixes False

    iterator request 0 [] [] True

## ADVANCED
   Gets the metadata of a bucket or object.

   Arguments:
   - bucket: the name of the bucket.
   - key: the key of the object.
   - credentials: AWS credentials. If not provided, the default credentials will
     be used.
head : Text -> Text -> AWS_Credential -> Map Text Any ! S3_Error
head bucket key="" credentials:AWS_Credential=AWS_Credential.Default =
    response = raw_head bucket key credentials
    pairs = response.sdkFields.map f-> [f.memberName, f.getValueOrDefault response]
    Map.from_vector pairs

## PRIVATE
   Gets the raw metadata of a bucket or object.

   Arguments:
   - bucket: the name of the bucket.
   - key: the key of the object.
   - credentials: AWS credentials.
raw_head : Text -> Text -> AWS_Credential -> Map Text Any ! S3_Error
raw_head bucket key credentials =
    client = make_client_for_bucket bucket credentials
    case key == "" of
        True ->
            request = HeadBucketRequest.builder.bucket bucket . build
            handle_s3_errors bucket=bucket <| client.headBucket request
        False ->
            request = HeadObjectRequest.builder.bucket bucket . key key . build
            handle_s3_errors bucket=bucket key=key <| client.headObject request

## ADVANCED
   Gets an object from an S3 bucket.
   Returns a raw stream which can be read once.

   Arguments:
   - bucket: the name of the bucket.
   - key: the key of the object.
   - credentials: AWS credentials. If not provided, the default credentials will
     be used.
   - delimiter: The delimiter to use for deducing the filename from the path.
get_object : Text -> Text -> AWS_Credential -> Text -> Response_Body ! S3_Error
get_object bucket key credentials:AWS_Credential=AWS_Credential.Default delimiter="/" = handle_s3_errors bucket=bucket key=key <|
    request = GetObjectRequest.builder.bucket bucket . key key . build

    client = make_client_for_bucket bucket credentials
    response = client.getObject request

    inner_response = response.response
    s3_uri = URI.parse (uri_prefix + bucket + "/") / key
    content_type = inner_response.contentType
    name = filename_from_content_disposition inner_response.contentDisposition . if_nothing <|
        key.split delimiter . last
    metadata = File_Format_Metadata.Value path=key name=name content_type=content_type

    input_stream = Input_Stream.new response (handle_io_errors s3_uri)
    Response_Body.Raw_Stream input_stream metadata s3_uri

## PRIVATE
put_object (bucket : Text) (key : Text) credentials:AWS_Credential=AWS_Credential.Default request_body = handle_s3_errors bucket=bucket key=key <|
    client = make_client_for_bucket bucket credentials
    request = PutObjectRequest.builder.bucket bucket . key key . build
    client.putObject request request_body . if_not_error Nothing

## PRIVATE
upload_file (local_file : File) (bucket : Text) (key : Text) credentials:AWS_Credential=AWS_Credential.Default = handle_s3_errors bucket=bucket key=key <|
    request_body = Request_Body.from_local_file local_file
    put_object bucket key credentials request_body

## PRIVATE
   Deletes the object.
   It will not raise any errors if the object does not exist.
delete_object (bucket : Text) (key : Text) credentials:AWS_Credential=AWS_Credential.Default = handle_s3_errors bucket=bucket key=key <|
    client = make_client_for_bucket bucket credentials
    request = DeleteObjectRequest.builder . bucket bucket . key key . build
    client.deleteObject request . if_not_error Nothing

## PRIVATE
copy_object (source_bucket : Text) (source_key : Text) (target_bucket : Text) (target_key : Text) credentials:AWS_Credential=AWS_Credential.Default = handle_s3_errors bucket=source_bucket key=source_key <|
    client = make_client_for_bucket source_bucket credentials
    request = CopyObjectRequest.builder
        . destinationBucket target_bucket
        . destinationKey target_key
        . sourceBucket source_bucket
        . sourceKey source_key
        . build
    client.copyObject request . if_not_error Nothing

## PRIVATE
handle_s3_errors : Any -> Text -> Text -> Any ! S3_Error | AWS_SDK_Error
handle_s3_errors ~action bucket="" key="" =
    s3_inner_handler caught_panic =
        error = if bucket!="" && caught_panic.payload.is_a NoSuchBucketException then S3_Bucket_Not_Found.Error bucket else
            if bucket!="" && key!="" && caught_panic.payload.is_a NoSuchKeyException then S3_Key_Not_Found.Error bucket key else
                aws_error = caught_panic.payload
                aws_error_details = aws_error.awsErrorDetails
                code = aws_error_details.if_not_nothing <| aws_error_details.errorCode
                message = aws_error_details
                    . if_not_nothing aws_error_details.errorMessage
                    . if_nothing aws_error.getMessage
                S3_Error.Error message code
        Error.throw error
    s3_handler = Panic.catch S3Exception handler=s3_inner_handler
    AWS_SDK_Error.handle_java_errors <| s3_handler <| action

## PRIVATE
   Makes a client for the default region.
make_client : AWS_Credential -> S3Client
make_client credentials:AWS_Credential =
    region = credentials.get_default_region.as_java
    builder = ClientBuilder.new credentials.as_java region
    builder.buildS3Client

## PRIVATE
   Makes a client using the region in which the specified bucket is located.
   This is necessary, because if we are fetching the wrong region, we will get
   `PermanentRedirect` errors.
make_client_for_bucket : Text -> AWS_Credential -> S3Client
make_client_for_bucket bucket_name:Text credentials:AWS_Credential =
    java_credential = credentials.as_java
    # We get the region in which the bucket is located, or if it is somehow not available, we fall back to the default region.
    java_region = BucketLocator.getBucketRegion bucket_name java_credential
        . if_nothing credentials.get_default_region.as_java
    builder = ClientBuilder.new java_credential java_region
    builder.buildS3Client


## PRIVATE
   Utility method for running an action with Java exceptions mapping.
handle_io_errors uri:URI ~action =
    Panic.catch IOException action caught_panic->
        Error.throw (S3_Error.Error ("An IO error has occurred: " + caught_panic.payload.to_text) uri.to_text)

## PRIVATE
scheme = "s3"

## PRIVATE
uri_prefix = scheme + "://"
