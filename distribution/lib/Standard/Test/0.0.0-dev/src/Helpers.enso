private

from Standard.Base import all
from Standard.Base.Runtime import assert
from Standard.Base.Runtime import State

import project.Clue.Clue
import project.Group.Group
import project.Spec.Spec
import project.Spec_Result.Spec_Result
import project.Suite.Suite
import project.Suite_Config.Suite_Config
import project.Test.Test
import project.Test_Reporter
import project.Test_Result.Test_Result


run_specs_from_group : Vector Spec -> Group -> Any -> Vector Test_Result
run_specs_from_group (specs : Vector Spec) (group : Group) progress_reporter =
    assert (group.is_pending.not)
    case specs.is_empty of
        True -> []
        False ->
            test_results = specs.map spec->
                assert (group_contains_spec group spec)
                progress_reporter.report_progress (group.name+": "+spec.name)
                pair = run_spec spec
                spec_res = pair.second
                time_taken = pair.first
                Test_Result.Impl group.name spec.name spec_res time_taken

            progress_reporter.report_progress (group.name+": (Teardown)") increment=0
            # Invoke the teardown of the group
            group.teardown Nothing
            progress_reporter.clear
            test_results


group_contains_spec (group : Group) (spec : Spec) -> Boolean =
    spec_names = group.specs.map (it-> it.name)
    spec_names.contains spec.name


run_spec : Spec -> Pair Duration Spec_Result
run_spec (spec : Spec) =
    pair = case spec.pending of
        Nothing -> Duration.time_execution <|
            State.run Clue Nothing (execute_spec_code spec.code)
        reason -> Pair.new Duration.zero (Spec_Result.Pending reason)
    pair


## PRIVATE
execute_spec_code : (Nothing -> Any) -> Spec_Result
execute_spec_code spec_code =
    recovery = Panic.recover Any <|
        result = spec_code Nothing
        result.catch Any err->
            Panic.throw (Finished_With.Error err result.get_stack_trace_text)
        Nothing
    maybeExc = case recovery of
        _ -> Spec_Result.Success
    result = maybeExc.catch Any ex->
        case ex of
            Spec_Result.Failure _ _ -> ex
            Finished_With.Error err stack_trace_text ->
                Spec_Result.Failure (Test.enrich_message_with_clue ("An unexpected error was returned: " + err.to_text)) details=stack_trace_text
            _ -> Spec_Result.Failure (Test.enrich_message_with_clue ("An unexpected panic was thrown: " + ex.to_text)) details=maybeExc.get_stack_trace_text
    result


## PRIVATE

   An error describing that a test finished with an unexpected error.
type Finished_With
    ## PRIVATE

       An error describing that a test finished with an unexpected error.

       Arguments:
       - err: The payload of the error that triggered this error.
       - stack_trace_text: A textual representation of the stack trace for the
         error.
    Error err stack_trace_text
