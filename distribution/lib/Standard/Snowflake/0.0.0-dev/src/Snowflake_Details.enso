from Standard.Base import all
import Standard.Base.Data.Numbers.Number_Parse_Error
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Database.Connection.Connection_Options.Connection_Options
import Standard.Database.Connection.Credentials.Credentials

import project.Internal.Snowflake_Connection.Snowflake_Connection

polyglot java import net.snowflake.client.jdbc.SnowflakeDriver

type Snowflake_Details
    ## Connect to a Snowflake database.

       Arguments:
       - account: The name of the account to connect to.
       - credentials: The credentials to use for the connection.
       - database: The name of the database to connect to.
       - schema: The name of the schema to connect to.
       - warehouse: The name of the warehouse to use.
    Snowflake account:Text credentials:Credentials database:Text="SNOWFLAKE" schema:Text="PUBLIC" warehouse:Text=""

    ## PRIVATE
       Build the Connection resource.

       Arguments:
       - options: Overrides for the connection properties.
    connect : Connection_Options -> Snowflake_Connection
    connect self options =
        properties = options.merge self.jdbc_properties

        ## Cannot use default argument values as gets in an infinite loop if you do.
        make_new database schema warehouse =
            Snowflake_Details.Snowflake self.account self.credentials (database.if_nothing self.database) (schema.if_nothing self.schema) (warehouse.if_nothing self.warehouse) . connect options

        Snowflake_Connection.create self.jdbc_url properties make_new

    ## PRIVATE
       Provides the jdbc url for the connection.
    jdbc_url : Text
    jdbc_url self =
        'jdbc:snowflake://' + self.account + ".snowflakecomputing.com"

    ## PRIVATE
       Provides the properties for the connection.
    jdbc_properties : Vector (Pair Text Text)
    jdbc_properties self =
        ## If Arrow dependency is to be avoided (https://community.snowflake.com/s/article/SAP-BW-Java-lang-NoClassDefFoundError-for-Apache-arrow)
        ## [Pair.new 'jdbc_query_result_format' 'json']
        ## should be prepended to properties. That would make it fallback to plain `json`.

        account = [Pair.new 'account' self.account]
        credentials = [Pair.new 'user' self.credentials.username, Pair.new 'password' self.credentials.password]
        database = [Pair.new 'db' self.database]
        schema = [Pair.new 'schema' self.schema]
        warehouse = if self.warehouse=="" then [] else [Pair.new 'warehouse' self.warehouse]

        ## Control the format of TIMESTAMP and TIME fields
        formats = [Pair.new "TIME_OUTPUT_FORMAT" "HH24:MI:SS.FF9", Pair.new "TIMESTAMP_OUTPUT_FORMAT" "YYYY-MM-DD HH24:MI:SS.FF9 TZHTZM", Pair.new "TIMESTAMP_NTZ_OUTPUT_FORMAT" "YYYY-MM-DD HH24:MI:SS.FF9", Pair.new "TIMESTAMP_LTZ_OUTPUT_FORMAT" "YYYY-MM-DD HH24:MI:SS.FF9"]
        account + credentials + database + schema + warehouse + formats
