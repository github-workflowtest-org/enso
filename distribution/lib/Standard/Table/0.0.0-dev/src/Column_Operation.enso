from Standard.Base import all
import Standard.Base.Errors.Deprecated.Deprecated

import project.Column_Ref.Column_Ref
import project.Expression.Expression
import project.Simple_Expression.Simple_Calculation
import project.Simple_Expression.Simple_Expression

## PRIVATE

   Defines a column operation generally acting on each row producing a new
   column. Deprecated in favour of `Simple_Expression`.
type Column_Operation
    ## Add two values/columns.
    Add (input : Column_Ref|Expression|Number|Text) (rhs : Column_Ref|Expression|Number|Text)

    ## Subtract two values/columns.
    Subtract (input : Column_Ref|Expression|Number) (rhs : Column_Ref|Expression|Number)

    ## Multiply two values/columns.
    Multiply (input : Column_Ref|Expression|Number) (rhs : Column_Ref|Expression|Number)

    ## Divide a fixed value or column by another value or column.
    Divide (input : Column_Ref|Expression|Number) (rhs : Column_Ref|Expression|Number)

    ## Compute the remainder of a fixed value or column divided by another
       value or column.
    Mod (input : Column_Ref|Expression|Number) (rhs : Column_Ref|Expression|Number)

    ## Raise a fixed value or column to the power of another value or column.
    Power (input : Column_Ref|Expression|Number) (rhs : Column_Ref|Expression|Number)

    ## Rounds values in the column to the specified precision.
    Round (input : Column_Ref|Expression|Number) (precision:Integer = 0) (use_bankers:Boolean = False)

    ## Rounds values in the column up to the nearest integer.
    Ceil (input : Column_Ref|Expression|Number)

    ## Rounds values in the column down to the nearest integer.
    Floor (input : Column_Ref|Expression|Number)

    ## Truncates the fractional part of values in the column.
       If a Date_Time, returns the Date.
    Truncate (input : Column_Ref|Expression|Number|Date_Time)

    ## Returns the minimum value of two columns.
    Min (input : Column_Ref|Expression|Any) (rhs : Column_Ref|Expression|Any)

    ## Returns the maximum value of two columns.
    Max (input : Column_Ref|Expression|Any) (rhs : Column_Ref|Expression|Any)

    ## Adds a period to a date/time column.
    Date_Add (input : Column_Ref|Expression|Date_Time|Date|Time_Of_Day) (length : Column_Ref|Expression|Integer) (period : Date_Period|Time_Period = Date_Period.Day)

    ## Returns part of a date/time column.
    Date_Part (input : Column_Ref|Expression|Date_Time|Date|Time_Of_Day) (period : Date_Period|Time_Period)

    ## Returns the difference between two date/time columns.
    Date_Diff (input : Column_Ref|Expression|Date_Time|Date|Time_Of_Day) (end : Column_Ref|Expression|Date_Time|Date|Time_Of_Day) (period:Date_Period|Time_Period = Date_Period.Day)

    ## Negate a boolean column.
    Not (input : Column_Ref|Expression|Boolean)

    ## Boolean AND on two boolean columns.
    And (input : Column_Ref|Expression|Boolean) (rhs : Column_Ref|Expression|Boolean)

    ## Boolean OR on two boolean columns.
    Or (input : Column_Ref|Expression|Boolean) (rhs : Column_Ref|Expression|Boolean)

    ## If input meets a condition return true value, otherwise false value.

       The `true_value` and `false_value` can be either a constant or a column.
    If (input : Column_Ref|Expression|Any) (condition:Filter_Condition) (true_value:Column_Ref|Expression|Any = True) (false_value:Column_Ref|Expression|Any = False)

    ## Removes the specified characters, by default any whitespace, from the
       start, the end, or both ends of the input.
    Trim (input : Column_Ref|Expression|Text) (where:Location = Location.Both) (what:Text|Column_Ref = "")

## PRIVATE
Simple_Expression.from (that:Column_Operation) =
    derived = case that of
        Column_Operation.Add input rhs -> Simple_Expression.From input (Simple_Calculation.Add rhs)
        Column_Operation.Subtract input rhs -> Simple_Expression.From input (Simple_Calculation.Subtract rhs)
        Column_Operation.Multiply input rhs -> Simple_Expression.From input (Simple_Calculation.Multiply rhs)
        Column_Operation.Divide input rhs -> Simple_Expression.From input (Simple_Calculation.Divide rhs)
        Column_Operation.Mod input rhs -> Simple_Expression.From input (Simple_Calculation.Mod rhs)
        Column_Operation.Power input rhs -> Simple_Expression.From input (Simple_Calculation.Power rhs)
        Column_Operation.Round input precision use_bankers -> Simple_Expression.From input (Simple_Calculation.Round precision use_bankers)
        Column_Operation.Ceil input -> Simple_Expression.From input Simple_Calculation.Ceil
        Column_Operation.Floor input -> Simple_Expression.From input Simple_Calculation.Floor
        Column_Operation.Truncate input -> Simple_Expression.From input Simple_Calculation.Truncate
        Column_Operation.Min input rhs -> Simple_Expression.From input (Simple_Calculation.Min rhs)
        Column_Operation.Max input rhs -> Simple_Expression.From input (Simple_Calculation.Max rhs)
        Column_Operation.Date_Add input length period -> Simple_Expression.From input (Simple_Calculation.Date_Add length period)
        Column_Operation.Date_Part input period -> Simple_Expression.From input (Simple_Calculation.Date_Part period)
        Column_Operation.Date_Diff input end period -> Simple_Expression.From input (Simple_Calculation.Date_Diff end period)
        Column_Operation.Not input -> Simple_Expression.From input Simple_Calculation.Not
        Column_Operation.And input rhs -> Simple_Expression.From input (Simple_Calculation.And rhs)
        Column_Operation.Or input rhs -> Simple_Expression.From input (Simple_Calculation.Or rhs)
        Column_Operation.If input condition true_value false_value -> Simple_Expression.From input (Simple_Calculation.If condition true_value false_value)
        Column_Operation.Trim input where what -> Simple_Expression.From input (Simple_Calculation.Trim where what)
    Warning.attach (Deprecated.Warning "Standard.Table.Column_Operation.Column_Operation" "" "Deprecated: `Column_Operation` has been replaced by `Simple_Expression`.") derived
