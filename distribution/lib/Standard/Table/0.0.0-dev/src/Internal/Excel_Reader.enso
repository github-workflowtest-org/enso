private

from Standard.Base import all
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.System.Input_Stream.Input_Stream

import project.Excel.Excel_Range.Excel_Range
import project.Headers.Headers
import project.Internal.Excel_Section.Excel_Section
import project.Internal.Java_Problems
import project.Table.Table
from project.Errors import Duplicate_Output_Column_Names, Empty_Sheet, Invalid_Column_Names, Invalid_Location

polyglot java import java.io.File as Java_File
polyglot java import org.apache.poi.poifs.filesystem.NotOLE2FileException
polyglot java import org.apache.poi.UnsupportedFileFormatException
polyglot java import org.enso.table.error.InvalidLocationException
polyglot java import org.enso.table.excel.ExcelFileFormat
polyglot java import org.enso.table.excel.ExcelHeaders
polyglot java import org.enso.table.read.ExcelReader

## PRIVATE
   Convert Headers to the correct HeaderBehavior
make_java_headers : Headers -> Any
make_java_headers headers:Headers = case headers of
    Headers.Has_Headers -> ExcelHeaders.HeaderBehavior.USE_FIRST_ROW_AS_HEADERS
    Headers.Detect_Headers -> ExcelHeaders.HeaderBehavior.INFER
    Headers.No_Headers -> ExcelHeaders.HeaderBehavior.EXCEL_COLUMN_NAMES

## PRIVATE
   Handle and map the Java errors when reading an Excel file
handle_reader : File -> (Java_File -> (Table | Vector)) -> (Table | Vector)
handle_reader file reader =
    # TODO [RW] handle InvalidFormatException
    File_Error.handle_java_exceptions file <| handle_invalid_location <|
        handle_bad_format file <| Empty_Sheet.handle_java_exception <|
            java_file = Java_File.new file.path
            reader java_file

## PRIVATE
   Reads an input Excel file according to the provided section.

   Arguments:
   - file: The File object to read.
   - section: The part of the Excel document to read.
   - on_problems: Specifies the behavior when a problem occurs during the
     operation. By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.
   - xls_format: If `True` then the file is read in using Excel 95-2003 format
     otherwise reads in Excel 2007+ format.
read_file : File -> Excel_Section -> Problem_Behavior -> Boolean -> (Table | Vector)
read_file file section on_problems xls_format=False =
    file_format = if xls_format then ExcelFileFormat.XLS else ExcelFileFormat.XLSX
    reader java_file = case section of
        Excel_Section.Worksheet sheet headers skip_rows row_limit ->
            Java_Problems.with_problem_aggregator on_problems java_problem_aggregator->
                java_table = case sheet of
                    _ : Integer -> ExcelReader.readSheetByIndex java_file sheet (make_java_headers headers) skip_rows row_limit file_format java_problem_aggregator
                    _ : Text -> ExcelReader.readSheetByName java_file sheet (make_java_headers headers) skip_rows row_limit file_format java_problem_aggregator
                Table.Value java_table
        Excel_Section.Cell_Range address headers skip_rows row_limit ->
            Java_Problems.with_problem_aggregator on_problems java_problem_aggregator->
                java_table = case address of
                    _ : Excel_Range -> ExcelReader.readRange java_file address.java_range (make_java_headers headers) skip_rows row_limit file_format java_problem_aggregator
                    _ : Text -> ExcelReader.readRangeByName java_file address (make_java_headers headers) skip_rows row_limit file_format java_problem_aggregator
                Table.Value java_table

    handle_reader file reader

## PRIVATE
   A helper that handles the Java exceptions reported when a malformed XLS file
   is opened.
handle_bad_format file ~action =
    bad_format caught_panic =
        Error.throw (File_Error.Corrupted_Format file caught_panic.payload.getMessage caught_panic.payload)
    handle_bad_format_with_handler bad_format action

## PRIVATE
   A helper that handles the Java exceptions reported when a malformed XLS file
   is opened.
handle_bad_format_with_handler handler ~action =
    Panic.catch UnsupportedFileFormatException handler=handler <|
        Panic.catch NotOLE2FileException handler=handler <|
            action

## PRIVATE
   A helper that handles the Java exceptions reported when a sheet, range or
   address is invalid.
handle_invalid_location ~action =
    bad_argument caught_panic =
        java_exception = caught_panic.payload
        Error.throw (Invalid_Location.Error java_exception.getLocation java_exception.getMessage)
    Panic.catch InvalidLocationException handler=bad_argument <|
        action
