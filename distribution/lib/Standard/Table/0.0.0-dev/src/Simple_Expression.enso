from Standard.Base import all
import Standard.Base.Errors.Deprecated.Deprecated
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Single_Choice
from Standard.Base.Widget_Helpers import make_format_chooser

import project.Column_Ref.Column_Ref
import project.Expression.Expression
import project.Internal.Table_Ref.Table_Ref
import project.Internal.Widget_Helpers
from project.Internal.Filter_Condition_Helpers import make_filter_column

## Defines a simple expression based off an input column and an operation to perform.
type Simple_Expression
    ## A simple expression based off an input column and an operation to perform.
    From (input : Column_Ref|Expression|Any = (Column_Ref.Index 0)) (operation : Simple_Calculation = Simple_Calculation.Copy)

    ## PRIVATE
       Interprets the `Simple_Expression` as operation on columns of a provided
       table, resolving the column references.
       It creates a new column instance which can be added to the table.
    evaluate : Table_Ref -> Boolean -> Problem_Behavior -> Any
    evaluate self table:Table_Ref use_input_name:Boolean on_problems:Problem_Behavior =
        input_column = table.resolve_as_column self.input
        derived = case self.operation of
            Simple_Calculation.Copy -> input_column . rename (input_column.name+" (Copy)")
            Simple_Calculation.Add rhs -> input_column + (table.resolve rhs)
            Simple_Calculation.Subtract rhs -> input_column - (table.resolve rhs)
            Simple_Calculation.Multiply rhs -> input_column * (table.resolve rhs)
            Simple_Calculation.Divide rhs -> input_column / (table.resolve rhs)
            Simple_Calculation.Mod rhs -> input_column % (table.resolve rhs)
            Simple_Calculation.Power rhs -> input_column ^ (table.resolve rhs)
            Simple_Calculation.Round precision use_bankers -> input_column.round precision use_bankers
            Simple_Calculation.Ceil -> input_column.ceil
            Simple_Calculation.Floor -> input_column.floor
            Simple_Calculation.Truncate -> input_column.truncate
            Simple_Calculation.Min rhs -> input_column.min (table.resolve rhs)
            Simple_Calculation.Max rhs -> input_column.max (table.resolve rhs)
            Simple_Calculation.Date_Add length period -> input_column.date_add (table.resolve length) period
            Simple_Calculation.Date_Part period -> input_column.date_part period
            Simple_Calculation.Date_Diff end period -> input_column.date_diff (table.resolve end) period
            Simple_Calculation.Not -> input_column.not
            Simple_Calculation.And rhs -> input_column && (table.resolve rhs)
            Simple_Calculation.Or rhs -> input_column || (table.resolve rhs)
            Simple_Calculation.Trim where what -> input_column.trim where (table.resolve what)
            Simple_Calculation.Text_Left length -> input_column.text_left (table.resolve length)
            Simple_Calculation.Text_Right length -> input_column.text_right (table.resolve length)
            Simple_Calculation.Text_Length -> input_column.text_length
            Simple_Calculation.Format format -> input_column.format format
            Simple_Calculation.If condition true_value false_value ->
                condition_column =  make_filter_column input_column (table.resolve_condition condition) on_problems
                condition_column.iif (table.resolve true_value) (table.resolve false_value)
        if use_input_name then derived.rename input_column.name else derived

    ## PRIVATE
       Create a widget for operation
    default_widget : Table_Ref -> Display -> Widget
    default_widget table:Table_Ref display=Display.Always =
        ## Constants
        text = Option "<Text Value>" "''"
        number = Option "<Number Value>" "0"
        boolean = Option "<True/False>" "True"
        expression = Option "<Expression>" "(expr '["+table.column_names.first+"]')"

        col_names = Widget_Helpers.make_column_ref_by_name_selector table
        with_all_types = Widget_Helpers.make_column_ref_by_name_selector table add_text=True add_number=True add_boolean=True
        with_number_text = Widget_Helpers.make_column_ref_by_name_selector table add_text=True add_number=True
        with_number = Widget_Helpers.make_column_ref_by_name_selector table add_number=True
        with_boolean = Widget_Helpers.make_column_ref_by_name_selector table add_boolean=True
        with_text = Widget_Helpers.make_column_ref_by_name_selector table add_text=True

        filter_cond = Widget_Helpers.make_filter_condition_selector table

        builder = Vector.new_builder
        fqn = Meta.get_qualified_type_name Simple_Calculation
        builder.append (Option "copy" fqn+".Copy")
        builder.append (Option "add" fqn+".Add" [["rhs", with_number_text]])
        builder.append (Option "subtract" fqn+".Subtract" [["rhs", with_number]])
        builder.append (Option "multiply" fqn+".Multiply" [["rhs", with_number]])
        builder.append (Option "divide" fqn+".Divide" [["rhs", with_number]])
        builder.append (Option "mod" fqn+".Mod" [["rhs", with_number]])
        builder.append (Option "power" fqn+".Power" [["rhs", with_number]])
        builder.append (Option "round" fqn+".Round")
        builder.append (Option "ceil" fqn+".Ceil")
        builder.append (Option "floor" fqn+".Floor")
        builder.append (Option "truncate" fqn+".Truncate")
        builder.append (Option "min" fqn+".Min" [["rhs", with_number_text]])
        builder.append (Option "max" fqn+".Max" [["rhs", with_number_text]])
        builder.append (Option "date add" fqn+".Date_Add" [["length", with_number]])
        builder.append (Option "date part" fqn+".Date_Part")
        builder.append (Option "date diff" fqn+".Date_Diff" [["end", col_names]])
        builder.append (Option "not" fqn+".Not")
        builder.append (Option "and" fqn+".And" [["rhs", with_boolean]])
        builder.append (Option "or" fqn+".Or" [["rhs", with_boolean]])
        builder.append (Option "if" fqn+".If" [["condition", filter_cond], ["true_value", with_all_types], ["false_value", with_all_types]])
        builder.append (Option "trim" fqn+".Trim" [["what", with_text]])
        builder.append (Option "text_left" fqn+".Text_Left" [["length", with_number]])
        builder.append (Option "text_right" fqn+".Text_Right" [["length", with_number]])
        builder.append (Option "text_length" fqn+".Text_Length")
        builder.append (Option "format" fqn+".Format" [["format", make_format_chooser include_number=True]])

        fqn_column = Meta.get_qualified_type_name Simple_Expression
        derived = Option "<Simple Expression>" fqn_column+".From" [["input", with_all_types], ["operation", Single_Choice builder.to_vector]]

        Single_Choice [text, number, boolean, expression, derived] display=display

## Defines the operation on a derived column.
type Simple_Calculation
    ## Creates a copy of the input column.
    Copy

    ## Add two values/columns.
    Add (rhs : Column_Ref|Expression|Number|Text)

    ## Subtract two values/columns.
    Subtract (rhs : Column_Ref|Expression|Number = 0)

    ## Multiply two values/columns.
    Multiply (rhs : Column_Ref|Expression|Number = 1)

    ## Divide a fixed value or column by another value or column.
    Divide (rhs : Column_Ref|Expression|Number = 1)

    ## Compute the remainder of a fixed value or column divided by another
       value or column.
    Mod (rhs : Column_Ref|Expression|Number = 1)

    ## Raise a fixed value or column to the power of another value or column.
    Power (rhs : Column_Ref|Expression|Number = 1)

    ## Rounds values in the column to the specified precision.
    Round (precision:Integer = 0) (use_bankers:Boolean = False)

    ## Rounds values in the column up to the nearest integer.
    Ceil

    ## Rounds values in the column down to the nearest integer.
    Floor

    ## Truncates the fractional part of values in the column.
       If a Date_Time, returns the Date.
    Truncate

    ## Returns the minimum value of two columns.
    Min (rhs : Column_Ref|Expression|Any)

    ## Returns the maximum value of two columns.
    Max (rhs : Column_Ref|Expression|Any)

    ## Adds a period to a date/time column.
    Date_Add (length : Column_Ref|Expression|Integer = 1) (period : Date_Period|Time_Period = Date_Period.Day)

    ## Returns part of a date/time column.
    Date_Part (period : Date_Period|Time_Period = Date_Period.Day)

    ## Returns the difference between two date/time columns.
    Date_Diff (end : Column_Ref|Expression|Date_Time|Date|Time_Of_Day) (period:Date_Period|Time_Period = Date_Period.Day)

    ## Negate a boolean column.
    Not

    ## Boolean AND on two boolean columns.
    And (rhs : Column_Ref|Expression|Boolean = True)

    ## Boolean OR on two boolean columns.
    Or (rhs : Column_Ref|Expression|Boolean =  False)

    ## If input meets a condition return true value, otherwise false value.

       The `true_value` and `false_value` can be either a constant or a column.
    If (condition:Filter_Condition=(Filter_Condition.Equal True)) (true_value:Column_Ref|Expression|Any = True) (false_value:Column_Ref|Expression|Any = False)

    ## Removes the specified characters, by default any whitespace, from the
       start, the end, or both ends of the input.
    Trim (where:Location = Location.Both) (what:Column_Ref|Expression|Text = "")

    ## Takes the first characters from the input column.
    Text_Left (length : Column_Ref|Expression|Integer = 1)

    ## Takes the last characters from the input column.
    Text_Right (length : Column_Ref|Expression|Integer = 1)

    ## Returns the character length of the input column.
    Text_Length

    ## Formats a column with the specified format.
    Format (format : Text = "")
