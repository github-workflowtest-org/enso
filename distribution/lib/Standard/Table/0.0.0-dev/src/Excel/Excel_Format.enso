from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Metadata.Display
import Standard.Base.System.File.Generic.Writable_File.Writable_File
import Standard.Base.System.File_Format_Metadata.File_Format_Metadata
import Standard.Base.System.Input_Stream.Input_Stream
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Numeric_Input, Text_Input
from Standard.Base.System.File_Format import parse_boolean_with_infer

import project.Excel.Excel_Range.Excel_Range
import project.Excel.Excel_Workbook.Excel_Workbook
import project.Headers.Headers
import project.Internal.Excel_Reader
import project.Internal.Excel_Section.Excel_Section
import project.Internal.Excel_Writer
import project.Match_Columns.Match_Columns
import project.Table.Table

## PRIVATE
   Resolve the xls_format setting to a boolean.
should_treat_as_xls_format : (Boolean|Infer) -> File_Format_Metadata -> Boolean ! Illegal_Argument
should_treat_as_xls_format xls_format file:File_Format_Metadata =
    if xls_format != Infer then xls_format else
        inferred_xls_format = xls_format_from_metadata file
        inferred_xls_format.if_nothing <|
            Error.throw (Illegal_Argument.Error ("File extension not recognized as Excel (" + file.name + "). Specify xls_format explicitly."))

## Read the file to a `Table` from an Excel file
type Excel_Format
    ## Reads an Excel file as a connection to an `Excel_Workbook`.

       Arguments:
       - xls_format:
         If set to `True`, the file is read as an Excel 95-2003 format.
         If set to `False`, the file is read as an Excel 2007+ format.
         `Infer` will attempt to deduce this from the extension of the filename.
       - default_sheet: The default sheet to use when writing a table to a file
         with these format settings.
    @default_sheet Text_Input
    Workbook (xls_format : Boolean | Infer = Infer) (default_sheet : Text = "EnsoSheet")

    ## Reads a sheet from an Excel file as a `Table`.

       Arguments:
       - sheet: The sheet number or name.
       - headers: Specifies if the first row contains the  column names. If set
         to `Detect_Headers`, the process tries to infer if headers are
         present. If the column names are not unique, numeric suffixes will be
         appended to disambiguate them.
       - skip_rows: The number of rows to skip before reading the data.
       - row_limit: The maximum number of rows to read. If set to `Nothing`, all
         rows are read.
       - xls_format:
         If set to `True`, the file is read as an Excel 95-2003 format.
         If set to `False`, the file is read as an Excel 2007+ format.
         `Infer` will attempt to deduce this from the extension of the filename.
    @sheet (Text_Input display=Display.Always)
    Sheet (sheet:(Integer|Text)=1) (headers:Headers=Headers.Detect_Headers) (skip_rows:Integer=0) (row_limit:(Integer|Nothing)=Nothing) (xls_format:Boolean|Infer=Infer)

    ## Reads a range from an Excel file as a `Table`.

       Arguments:
       - address: A name of a range or an Excel-style address (e.g. Sheet1!A1:B2).
       - headers: Specifies if the first row contains the  column names. If set
         to `Detect_Headers`, the process tries to infer if headers are
         present. If the column names are not unique, numeric suffixes will be
         appended to disambiguate them.
       - skip_rows: The number of rows to skip before reading the data.
       - row_limit: The maximum number of rows to read. If set to `Nothing`, all
         rows are read.
       - xls_format:
         If set to `True`, the file is read as an Excel 95-2003 format.
         If set to `False`, the file is read as an Excel 2007+ format.
         `Infer` will attempt to deduce this from the extension of the filename.
    @address Text_Input
    Range (address:(Text|Excel_Range)) (headers:Headers=Headers.Detect_Headers) (skip_rows:Integer=0) (row_limit:(Integer|Nothing)=Nothing) (xls_format : Boolean | Infer = Infer)

    ## PRIVATE
       ADVANCED
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> Excel_Format | Nothing
    for_read file:File_Format_Metadata =
        is_xls = xls_format_from_metadata file
        is_xls.if_not_nothing <| Excel_Format.Workbook xls_format=is_xls

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : Writable_File -> Excel_Format | Nothing
    for_file_write file = Excel_Format.for_read file

    ## PRIVATE
    get_dropdown_options : Vector Option
    get_dropdown_options =
        fqn = Meta.get_qualified_type_name Excel_Format
        workbook = Option "Excel Workbook" fqn+".Workbook"
        sheet = Option "Excel Sheet" fqn+".Sheet"
        range = Option "Excel Range" fqn+".Range"
        [workbook, sheet, range]

    ## PRIVATE
       ADVANCED
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        format = should_treat_as_xls_format self.xls_format file
        case self of
            Excel_Format.Workbook _ _ -> Excel_Workbook.new file format
            _ -> Excel_Reader.read_file file (as_section self) on_problems format

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata = File_Format_Metadata.no_information) =
        xls_format = if self.xls_format != Infer then self.xls_format else
            inferred_xls_format = xls_format_from_metadata metadata
            # If still unable to infer it, we default to False
            inferred_xls_format.if_nothing False

        bad_format _ =
            message = case self.xls_format of
                Infer ->
                    tried = if xls_format then "xls" else "xlsx"
                    "Cannot infer xls_format from a stream (tried "+tried+")."
                True -> "Stream was not in the expected format (xls)."
                False -> "Stream was not in the expected format (xlsx)."
            Error.throw (Illegal_Argument.Error message)

        Excel_Reader.handle_bad_format_with_handler bad_format <|
            workbook = Excel_Workbook.from_stream stream xls_format
            case self of
                Excel_Format.Workbook _ _ -> workbook
                _ -> workbook.read_section (as_section self)

    ## PRIVATE
       ADVANCED
       Implements the `Table.write` for this `File_Format`.

       Depending on the `section` will control where to write.
       - If `Excel_Section.Workbook` (the default), the `table` will be written
         to a new sheet in the workbook named `Sheet<n>` where n is the first
         integer >1 that is not already used as a sheet name. If too many sheets
         are present an `Illegal_Argument` error will be thrown.
       - If `Excel_Section.Worksheet`, the `table` will be written to the
         specified sheet (either adding or replacing).
       - If `Excel_Section.Cell_Range`, the `table` will be written to the
         specified range.

        Arguments:
        - file: The file to write to.
        - table: The table to write.
        - on_existing_file: What to do if the file already exists.
        - match_columns: How to match columns between the table and the file.
        - on_problems: What to do if there are problems reading the file.
    write_table : File -> Table -> Existing_File_Behavior -> Match_Columns -> Problem_Behavior -> File
    write_table self file table on_existing_file match_columns on_problems =
        format = should_treat_as_xls_format self.xls_format file
        Excel_Writer.write_file file table on_existing_file (as_section self) match_columns on_problems format

## PRIVATE
   This function returns:
   - `True` if the file is an XLS format,
   - `False` if the file is an XLSX format,
   - `Nothing` if the file is not an Excel format.
xls_format_from_metadata : File_Format_Metadata -> Boolean | Nothing
xls_format_from_metadata (metadata : File_Format_Metadata) =
    content_type = metadata.interpret_content_type
    from_content_type = content_type.if_not_nothing <|
        case content_type.base_type of
            "application/vnd.ms-excel" -> True
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" -> False
            _ -> Nothing
    from_content_type.if_nothing <|
        case metadata.guess_extension of
            ".xlsx" -> False
            ".xlsm" -> False
            ".xls" -> True
            ".xlt" -> True
            _ -> Nothing

## PRIVATE
   Converts this format to a corresponding `Excel_Section`.
as_section (format : Excel_Format) -> Excel_Section = case format of
    Excel_Format.Workbook _ default_sheet ->
        ## This case is only used for when writing to the workbook.
           This results in writing to the default sheet, and we always write headers (ignored with append).
        Excel_Section.Worksheet default_sheet headers=True
    Excel_Format.Sheet sheet headers skip_rows row_limit _ ->
        Excel_Section.Worksheet sheet headers skip_rows row_limit
    Excel_Format.Range address headers skip_rows row_limit _ ->
        Excel_Section.Cell_Range address headers skip_rows row_limit

## PRIVATE
   Constructs an `Excel_Format` instance from JSON.
   Only a subset of options is currently supported.
Excel_Format.from (that : JS_Object) =
    section = that.get "section" if_missing=(Error.throw (Illegal_Argument.Error "The `section` field is required."))
    case section.get "type" if_missing=(Error.throw (Illegal_Argument.Error "The `section.type` field is required.")) . to_case Case.Lower of
        "workbook" ->
            default_sheet = section.get "default_sheet" if_missing="EnsoSheet"
            Excel_Format.Workbook default_sheet=default_sheet
        "sheet" ->
            name = section.get "name" if_missing=(Error.throw (Illegal_Argument.Error "The `name` field is required."))
            headers = section.get "headers" |> parse_boolean_with_infer "headers"
            Excel_Format.Sheet sheet=name headers=headers
        "range" ->
            address = section.get "address" if_missing=(Error.throw (Illegal_Argument.Error "The `address` field is required."))
            headers = section.get "headers" |> parse_boolean_with_infer "headers"
            Excel_Format.Range address=address headers=headers
        unknown -> Error.throw (Illegal_Argument.Error "The `section.type` was "+unknown+" but it must be one of `workbook`, `sheet`, or `range`.")
