from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.System.File.Generic.Writable_File.Writable_File
import Standard.Base.System.File_Format_Metadata.File_Format_Metadata
import Standard.Base.System.Input_Stream.Input_Stream
from Standard.Base.Metadata.Choice import Option

import project.Image.Image

## PRIVATE
   List comes from org.opencv.imgcodecs.Imgcodecs#imread doc comment.
supported = [".bmp", ".dib", ".jpeg", ".jpg", ".jpe", ".jp2", ".png", ".webp", ".pbm", ".pgm", ".ppm", ".pxm", ".pnm", ".pfm", ".sr", ".ras", ".tiff", ".tif", ".exr", ".hdr", ".pic"]

## Read the file to a `Image` from a supported file format.
type Image_File_Format
    ## File_Format to read Image files
    For_File

    ## PRIVATE
       If the File_Format supports reading from the file, return a configured instance.
    for_read : File_Format_Metadata -> Image_File_Format | Nothing
    for_read file:File_Format_Metadata =
        extension = file.guess_extension
        if supported.contains extension then Image_File_Format.For_File else Nothing

    ## PRIVATE
       If this File_Format should be used for writing to that file, return a configured instance.
    for_file_write : Writable_File -> Image_File_Format | Nothing
    for_file_write file = Image_File_Format.for_read file

    ## PRIVATE
    get_dropdown_options : Vector Option
    get_dropdown_options = [Option "Image" (Meta.get_qualified_type_name Image_File_Format)+".For_File"]

    ## PRIVATE
       Implements the `File.read` for this `File_Format`
    read : File -> Problem_Behavior -> Any
    read self file on_problems =
        _ = [on_problems]
        Image.read file

    ## PRIVATE
       Implements decoding the format from a stream.
    read_stream : Input_Stream -> File_Format_Metadata -> Any
    read_stream self stream:Input_Stream (metadata : File_Format_Metadata = File_Format_Metadata.no_information) =
        extension = metadata.guess_extension . if_nothing (Error.throw (Illegal_Argument.Error "Could not determine the image file format."))
        tmp_file = File.create_temporary_file "image-" extension
        Panic.with_finalizer tmp_file.delete <|
            stream.write_to_file tmp_file
            Image.read tmp_file
