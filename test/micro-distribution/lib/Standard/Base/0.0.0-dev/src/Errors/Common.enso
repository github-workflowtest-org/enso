import project.Any.Any
import project.Data.Text.Text
import project.Error.Error
import project.Meta

polyglot java import java.util.regex.Pattern as Java_Pattern

@Builtin_Type
type Syntax_Error
    Error message

    to_display_text self = "Syntax error: "+self.message+"."

@Builtin_Type
type Arithmetic_Error
    Error message

    to_display_text self = "Arithmetic error: "+self.message+"."

@Builtin_Type
type Type_Error
    Error expected actual comment

    type_of_actual self =
        tpe = Meta.type_of self.actual
        if tpe.is_error then self.actual.to_display_text else tpe.to_display_text

    to_display_text self =
        got = case self.type_of_actual of
            text : Text -> text
            _           -> "<ERR>"
        exp = self.expected.to_display_text
        msg_1 =  replace_regex self.comment "\{exp\}" exp
        msg = replace_regex msg_1 "\{got\}" got
        "Type error: "+msg+"."

@Builtin_Type
type Not_Invokable
    Error target

    to_display_text self = "Type error: expected a function, but got "+self.target.to_display_text+"."

@Builtin_Type
type Compile_Error
    Error message

    to_display_text self = "Compile error: "+self.message+"."

@Builtin_Type
type Inexhaustive_Pattern_Match
    Error scrutinee

    to_display_text self = "Inexhaustive pattern match: no branch matches "+self.scrutinee.to_display_text+"."


@Builtin_Type
type No_Such_Method
    Error target symbol

    method_name self = Meta.meta self.symbol . name

    to_display_text self =
        target_type_name = if Meta.is_polyglot self.target then self.target.to_display_text else (Meta.type_of self.target).to_display_text
        "Method `"+self.method_name+"` of type "+target_type_name+" could not be found."

@Builtin_Type
type Module_Not_In_Package_Error
    Error

    to_display_text self = "Module is not a part of a package."

@Builtin_Type
type Arity_Error
    Error expected_min expected_max actual

    to_display_text self =
        expected = self.expected_min.to_text
        expectedRange = if (self.expected_min == self.expected_max) then expected else
            if (self.expected_max == -1) then expected+"-" else expected+self.expected_max.to_text

        "Wrong number of arguments. Expected "+expectedRange+", but got "+self.actual.to_text+"."

@Builtin_Type
type Forbidden_Operation
    Error message

    to_display_text self = "Forbidden operation: "+self.message

## PRIVATE
   A helper that replaces complicated `Text.replace` from main distribution, used for simple error message formatting.
replace_regex (text : Text) (regex : Text) (replacement : Text) -> Text =
    Java_Pattern.compile regex . matcher text . replaceAll replacement
