from Standard.Base import all
import Standard.Base.Errors.Common.Arithmetic_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Base.Data.Numbers import Number_Parse_Error
from Standard.Base.Errors.Common import Loss_Of_Numeric_Precision, Out_Of_Range

from Standard.Test import all

import project.Data.Round_Spec

polyglot java import java.lang.Integer as Java_Integer

Decimal.should_have_rep self rep = self.internal_representation . should_equal rep

add_specs suite_builder =
    suite_builder.group "construction" group_builder->
        group_builder.specify "should be able to construct a Decimal from a string" <|
            Decimal.new "123.45" . should_have_rep [12345, 5, 2]
            Decimal.from_string "123.45" . should_have_rep [12345, 5, 2]

        group_builder.specify "should throw Number_Parse_Error on a badly-formatted string" <|
            Decimal.new "ee" . should_fail_with Number_Parse_Error
            Decimal.new "--123.3.3" . should_fail_with Number_Parse_Error

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new "123.45" mc . should_have_rep [1235, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.5")

        group_builder.specify "should be able to construct a Decimal from a string, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.bankers
            Decimal.new "123.45" mc . should_have_rep [1234, 4, 1]
            Decimal.new "123.45" mc . should_equal (Decimal.new "123.4")

        group_builder.specify "should be able to construct a Decimal from a long string" <|
            Decimal.new "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]
            Decimal.from_string "495782984723948723947239938732974241.2345" . should_have_rep [4957829847239487239472399387329742412345, 40, 4]

        group_builder.specify "should be able to construct a Decimal from a small integer" <|
            Decimal.new 1234500 . should_have_rep [1234500, 7, 0]

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 4
            Decimal.new 1234500 mc . should_have_rep [1235, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1235000)

        group_builder.specify "should be able to construct a Decimal from a small integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 4 Rounding_Mode.bankers
            Decimal.new 1234500 mc . should_have_rep [1234, 4, -3]
            Decimal.new 1234500 mc . should_equal (Decimal.new 1234000)

        group_builder.specify "should be able to construct a Decimal from a large integer" <|
            Decimal.new 495782984723948723947239938732974241234500 . should_have_rep [495782984723948723947239938732974241234500 , 42, 0]

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 39
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241235 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241235000 )

        group_builder.specify "should be able to construct a Decimal from a large integer, with an explicit precision, using the non-default rounding" <|
            mc = Math_Context.new 39 Rounding_Mode.bankers
            Decimal.new 495782984723948723947239938732974241234500 mc . should_have_rep [495782984723948723947239938732974241234 , 39, -3]
            Decimal.new 495782984723948723947239938732974241234500 mc . should_equal (Decimal.new 495782984723948723947239938732974241234000 )

        group_builder.specify "should be able to construct a Decimal from a float" <|
            d = Decimal.from_float 123.45
            d.should_have_rep [12345, 5, 2]

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using the default rounding" <|
            mc = Math_Context.new 5
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12313, 5, 2]
            d.should_equal (Decimal.new "123.13")

        group_builder.specify "should be able to construct a Decimal from a float, with an explicit precision, using a non-default rounding" <|
            mc = Math_Context.new 5 Rounding_Mode.bankers
            d = Decimal.from_float 123.125 mc
            d.should_have_rep [12312, 5, 2]
            d.should_equal (Decimal.new "123.12")

        group_builder.specify "should be able to explicity and implicitly specify infinite precision" <|
            Decimal.new "123.125" (Math_Context.new 5) . should_equal 123.13
            Decimal.new "123.125" (Math_Context.new Unlimited) . should_equal 123.125
            Decimal.new "123.125" (Math_Context.new 0) . should_equal 123.125

            d1 = Decimal.new "1"
            d3 = Decimal.new "3"
            d4 = Decimal.new "4"

            d1.divide d4 (Math_Context.new Unlimited) . should_equal 0.25
            d1.divide d3 (Math_Context.new 12) . internal_representation . should_equal [333333333333, 12, 12]
            d1.divide d3 . should_fail_with Arithmetic_Error
            d1.divide d3 (Math_Context.new Unlimited) . should_fail_with Arithmetic_Error

        group_builder.specify "should report precision loss accurately" <|
            mc4 = Math_Context.new 4
            mc5 = Math_Context.new 5

            Problems.not_expect_warning (Decimal.new "123.25")
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new "123.25" mc5)

            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc4)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 123.25 mc5)

            Problems.not_expect_warning (Decimal.new 12325)
            Problems.expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc4)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new 12325 mc5)

        group_builder.specify "should throw Illegal_Argument for NaN/Inf" <|
            Decimal.new Number.nan . should_fail_with Illegal_Argument
            Decimal.new Number.positive_infinity . should_fail_with Illegal_Argument
            Decimal.new Number.negative_infinity . should_fail_with Illegal_Argument

        group_builder.specify "should be convertible via .from" <|
            Decimal.from "123.45" . should_equal (Decimal.new "123.45")
            Decimal.from "123.45" . should_equal (Decimal.from_string "123.45")
            Decimal.from 123.45 . should_equal (Decimal.new 123.45)
            Decimal.from 123.45 . should_equal (Decimal.from_float 123.45)
            Decimal.from 12345 . should_equal (Decimal.new 12345)
            Decimal.from 12345 . should_equal (Decimal.from_integer 12345)

        group_builder.specify "constructor should respect Math_Context " <|
            Decimal.new 12000 (Math_Context.new 0) . should_equal 12000
            Decimal.new 12000 (Math_Context.new 1) . should_equal 10000
            Decimal.new 12000 (Math_Context.new 2) . should_equal 12000
            Decimal.new 12000 (Math_Context.new 3) . should_equal 12000

    suite_builder.group "comparison" group_builder->
        group_builder.specify "should compare correctly" <|
            nums = [["-45.23", "124.872"], [-45.23, 124.872], [-45, 124]]
            nums.map pr->
                a = Decimal.new (pr.at 0)
                b = Decimal.new (pr.at 1)

                (a == a) . should_be_true
                (b == b) . should_be_true
                (a == b) . should_be_false
                (b == a) . should_be_false

                (a != a) . should_be_false
                (b != b) . should_be_false
                (a != b) . should_be_true
                (b != a) . should_be_true

                (a <= a) . should_be_true
                (b <= b) . should_be_true
                (a <= b) . should_be_true
                (b <= a) . should_be_false

                (a >= a) . should_be_true
                (b >= b) . should_be_true
                (a >= b) . should_be_false
                (b >= a) . should_be_true

                (a < b) . should_be_true
                (b > a) . should_be_true
                (a > b) . should_be_false
                (b < a) . should_be_false

                (a <= b) . should_be_true
                (b >= a) . should_be_true
                (a >= b) . should_be_false
                (b <= a) . should_be_false

                (a < a) . should_be_false
                (b < b) . should_be_false
                (a > a) . should_be_false
                (b > b) . should_be_false

                a . should_equal a
                b . should_equal b
                a . should_not_equal b
                b . should_not_equal a

        group_builder.specify "should compare correctly, even with different internal representations" <|
            a = Decimal.new "12000"
            b = Decimal.new "12000" (Math_Context.new 2)
            c = Decimal.new "12000" (Math_Context.new 3)
            huge_a = Decimal.new "3.4E320"
            huge_b = Decimal.new "3.400E320"
            huge_c = Decimal.new "3.4000000E320"

            combinations = [[a, b], [a, c], [b, c], [huge_a, huge_b], [huge_a, huge_c], [huge_b, huge_c]]
                + [[-a, -b], [-a, -c], [-b, -c], [-huge_a, -huge_b], [-huge_a, -huge_c], [-huge_b, -huge_c]]
            combinations.map pr->
                x0 = pr.at 0
                x1 = pr.at 1

                ir0 = x0.internal_representation
                ir1 = x1.internal_representation
                ir0 . should_not_equal ir1

                (x0 == x1) . should_be_true
                (x1 == x0) . should_be_true
                (x0 != x1) . should_be_false
                (x1 != x0) . should_be_false

                (Comparable.hash_builtin x0) . should_equal (Comparable.hash_builtin x1)

        group_builder.specify "should compare correctly to Integer and Float" <|
            values = []
                + [[0.1, 0.1]]
                + [["0.1", 0.1]]
                + [["0", 0]]
                + [["1", 1]]
                + [["-1", -1]]
                + [["2", 2]]
                + [["-2", -2]]
                + [["0", 0.0]]
                + [["1", 1.0]]
                + [["-1", -1.0]]
                + [["2", 2.0]]
                + [["-2", -2.0]]
                + [[0, 0]]
                + [[1, 1]]
                + [[-1, -1]]
                + [[2, 2]]
                + [[-2, -2]]
                + [[0, 0.0]]
                + [[1, 1.0]]
                + [[-1, -1.0]]
                + [[2, 2.0]]
                + [[-2, -2.0]]
                + [["12.34", 12.34]]
                + [["-34.56", -34.56]]
                + [["72775434512.34", 72775434512.34]]
                + [["-347757349.56784374", -347757349.56784374]]
                + [[12.34, 12.34]]
                + [[-34.56, -34.56]]
                + [[72775434512.34, 72775434512.34]]
                + [[-347757349.56784374, -347757349.56784374]]
                + [["2.0", 2.0]]
                + [["2.00", 2.0]]
                + [["2.000", 2.0]]
                + [[9223372036854770000.0, 9223372036854770000.0]]
                + [[9223372036854770000000.0, 9223372036854770000000.0]]
                + [[92233720368547700000000000000000000000.0, 92233720368547700000000000000000000000.0]]
                + [[9223372036854775805, 9223372036854775805]]
                + [[9223372036854775806, 9223372036854775806]]
                + [[9223372036854775807, 9223372036854775807]]
                + [[9223372036854775808, 9223372036854775808]]
                + [[9223372036854775809, 9223372036854775809]]
                + [[9223372036854775999, 9223372036854775999]]
                + [[9223372036854776000, 9223372036854776000]]
                + [[9223372036854776001, 9223372036854776001]]
                + [[9223372036854777000, 9223372036854777000]]
                + [[-9223372036854775810, -9223372036854775810]]
                + [[-9223372036854775809, -9223372036854775809]]
                + [[-9223372036854775808, -9223372036854775808]]
                + [[-9223372036854775807, -9223372036854775807]]
                + [[-9223372036854775807, -9223372036854775807]]
                + [[-9223372036854775806, -9223372036854775806]]
                + [[3946372036854775806000, 3946372036854775806000]]
                + [[3946372036854775807000, 3946372036854775807000]]
                + [[3946372036854775808000, 3946372036854775808000]]
                + [[-3946372036854775809000, -3946372036854775809000]]
                + [[-3946372036854775808000, -3946372036854775808000]]
                + [[-3946372036854775807000, -3946372036854775807000]]
                + [[39463720368547758060000000, 39463720368547758060000000]]
                + [[39463720368547758070000000, 39463720368547758070000000]]
                + [[39463720368547758080000000, 39463720368547758080000000]]
                + [[-39463720368547758090000000, -39463720368547758090000000]]
                + [[-39463720368547758080000000, -39463720368547758080000000]]
                + [[-39463720368547758070000000, -39463720368547758070000000]]
                + [["9223372036854775805", 9223372036854775805]]
                + [["9223372036854775806", 9223372036854775806]]
                + [["9223372036854775807", 9223372036854775807]]
                + [["9223372036854775808", 9223372036854775808]]
                + [["9223372036854775809", 9223372036854775809]]
                + [["9223372036854775999", 9223372036854775999]]
                + [["9223372036854776000", 9223372036854776000]]
                + [["9223372036854776001", 9223372036854776001]]
                + [["9223372036854777000", 9223372036854777000]]
                + [["-9223372036854775810", -9223372036854775810]]
                + [["-9223372036854775809", -9223372036854775809]]
                + [["-9223372036854775808", -9223372036854775808]]
                + [["-9223372036854775807", -9223372036854775807]]
                + [["-9223372036854775807", -9223372036854775807]]
                + [["-9223372036854775806", -9223372036854775806]]
                + [["3946372036854775806000", 3946372036854775806000]]
                + [["3946372036854775807000", 3946372036854775807000]]
                + [["3946372036854775808000", 3946372036854775808000]]
                + [["-3946372036854775809000", -3946372036854775809000]]
                + [["-3946372036854775808000", -3946372036854775808000]]
                + [["-3946372036854775807000", -3946372036854775807000]]
                + [["39463720368547758060000000", 39463720368547758060000000]]
                + [["39463720368547758070000000", 39463720368547758070000000]]
                + [["39463720368547758080000000", 39463720368547758080000000]]
                + [["-39463720368547758090000000", -39463720368547758090000000]]
                + [["-39463720368547758080000000", -39463720368547758080000000]]
                + [["-39463720368547758070000000", -39463720368547758070000000]]
                + [[Float.max_value, Float.max_value]]
                + [[-Float.max_value, -Float.max_value]]
                + [[Float.min_value, Float.min_value]]
                + [[-Float.min_value, -Float.min_value]]
                + [[Float.max_value-1.0, Float.max_value-1.0]]
                + [[-Float.max_value+1.0, -Float.max_value+1.0]]

            values.map pr->
                v = pr.at 0
                d = Decimal.new v . to_float
                expected = pr.at 1 . to_float

                d . should_equal expected
                expected . should_equal d
                (d == expected) . should_be_true
                (expected == d) . should_be_true
                (d != expected) . should_be_false
                (expected != d) . should_be_false

                if v.is_a Text . not then
                    lesser = if v > 10000 then v/2 else if v < -10000 then v*2 else v-1
                    greater = if v > 10000 then v*2 else if v < -10000 then v/2 else v+1
                    (v > lesser) . should_be_true
                    (v < greater) . should_be_true

                    (v == lesser) . should_be_false
                    (lesser == v) . should_be_false
                    (v != lesser) . should_be_true
                    (lesser != v) . should_be_true
                    (v == greater) . should_be_false
                    (greater == v) . should_be_false
                    (v != greater) . should_be_true
                    (greater != v) . should_be_true

                    (d <= v) . should_be_true
                    (d >= v) . should_be_true
                    (v <= d) . should_be_true
                    (v >= d) . should_be_true

                    (d < d) . should_be_false
                    (d > d) . should_be_false
                    (d <= d) . should_be_true
                    (d >= d) . should_be_true

                    if greater.is_infinite.not then
                        (d < greater) . should_be_true
                        (d <= greater) . should_be_true
                        (greater > d) . should_be_true
                        (greater >= d) . should_be_true
                        (d > greater) . should_be_false
                        (d >= greater) . should_be_false
                        (greater < d) . should_be_false
                        (greater <= d) . should_be_false

                    if lesser.is_infinite.not then
                        (d > lesser) . should_be_true
                        (d >= lesser) . should_be_true
                        (lesser < d) . should_be_true
                        (lesser <= d) . should_be_true
                        (d < lesser) . should_be_false
                        (d <= lesser) . should_be_false
                        (lesser > d) . should_be_false
                        (lesser >= d) . should_be_false

        group_builder.specify "should not implicitly convert Decimal to Integer in comparison" <|
            (Decimal.new "12.5" == 12) . should_be_false
            (12 == Decimal.new "12.5") . should_be_false
            large_int = 9223372036854775807000
            large_fraction = Decimal.new "9223372036854775807000.3"
            (large_fraction == large_int) . should_be_false
            (large_int == large_fraction ) . should_be_false

    suite_builder.group "edge cases" group_builder->
        group_builder.specify "can support values outside the double range" <|
            d = Decimal.new Float.max_value
            (d == Float.max_value) . should_be_false
            ((d * d) == Float.max_value) . should_be_false
            ((-(d * d)) == -Float.max_value) . should_be_false
            Comparable.hash_builtin (d * d) . should_equal 2146435072
            Comparable.hash_builtin -(d * d) . should_equal -1048576
            Comparable.hash_builtin ((d * d) + 0.1) . should_equal 2146435072
            Comparable.hash_builtin ((-(d * d)) + 0.1) . should_equal -1048576

        group_builder.specify "from conversion supports values outside the double range" <|
            d = Float.max_value.to Decimal
            (d == Float.max_value) . should_be_true
            ((d * d) == Float.max_value) . should_be_false
            ((-(d * d)) == -Float.max_value) . should_be_false
            Comparable.hash_builtin (d * d) . should_equal 2146435072
            Comparable.hash_builtin -(d * d) . should_equal -1048576
            Comparable.hash_builtin ((d * d) + 0.1) . should_equal 2146435072
            Comparable.hash_builtin ((-(d * d)) + 0.1) . should_equal -1048576

    suite_builder.group "arithmetic" group_builder->
        group_builder.specify "should allow arithmetic with Decimals, without Math_Context" <|
            (Decimal.new 1 + Decimal.new 2) . should_equal (Decimal.new 3)
            (Decimal.new 1.1 + Decimal.new 2.2) . should_equal (Decimal.new 3.3)

            (Decimal.new 10 - Decimal.new 6) . should_equal (Decimal.new 4)
            (Decimal.new 10.1 - Decimal.new 6.6) . should_equal (Decimal.new 3.5)

            (Decimal.new 3 * Decimal.new 7) . should_equal (Decimal.new 21)
            (Decimal.new 3.12 * Decimal.new 7.97) . should_equal (Decimal.new 24.8664)

            (Decimal.new 50 / Decimal.new 2) . should_equal (Decimal.new 25)
            (Decimal.new 50.75 / Decimal.new 2.5) . should_equal (Decimal.new 20.3)

            (Decimal.new 1 + Decimal.new -2) . should_equal (Decimal.new -1)
            (Decimal.new 1.1 + Decimal.new -2.2) . should_equal (Decimal.new -1.1)

            (Decimal.new -10 - Decimal.new 6) . should_equal (Decimal.new -16)
            (Decimal.new 10.1 - Decimal.new -6.6) . should_equal (Decimal.new 16.7)

            (Decimal.new 3 * Decimal.new -7) . should_equal (Decimal.new -21)
            (Decimal.new -3.12 * Decimal.new 7.97) . should_equal (Decimal.new -24.8664)

            (Decimal.new -50 / Decimal.new -2) . should_equal (Decimal.new 25)
            (Decimal.new -50.75 / Decimal.new -2.5) . should_equal (Decimal.new 20.3)

            (Decimal.new 213427523957 + Decimal.new 93849398884384) . should_equal (Decimal.new 94062826408341)
            (Decimal.new "723579374753.3535345" + Decimal.new "35263659267.23434535") . should_equal (Decimal.new "758843034020.58787985")

            (Decimal.new -29388920982834 - Decimal.new 842820) . should_equal (Decimal.new -29388921825654)
            (Decimal.new "-8273762787.3535345" - Decimal.new "76287273.23434535") . should_equal (Decimal.new "-8350050060.58787985")

            (Decimal.new 7297927982888383 * Decimal.new 828737) . should_equal (Decimal.new 6048062942754969862271)
            (Decimal.new "893872388.3535345" * Decimal.new "72374727737.23434535") . should_equal (Decimal.new "64693770738918463976.840471466139575")

            (Decimal.new "909678645268840" / Decimal.new "28029830") . should_equal (Decimal.new "32453948")
            (Decimal.new "384456406.7860325392609633764" / Decimal.new "24556.125563546") . should_equal (Decimal.new "15656.2323234234")

            (Decimal.new 3948539458034580838458034803485 + Decimal.new 237957498573948579387495837459837) . should_equal (Decimal.new 241906038031983160225953872263322)
            (Decimal.new "927349527347587934.34573495739475938745" + Decimal.new "37593874597239487593745.3457973847574") . should_equal (Decimal.new "37594801946766835181679.69153234215215938745")

            (Decimal.new -239485787538745937495873495759598 - Decimal.new 273958739485793475934793745) . should_equal (Decimal.new -239486061497485423289349430553343)
            (Decimal.new "-79237492374927979579239292.293749287928373" - Decimal.new "239729379279872947923947.234273947927397239") . should_equal (Decimal.new "-79477221754207852527163239.528023235855770239")

            (Decimal.new 3745937948729837923798237 * Decimal.new 273948729872398729387) . should_equal (Decimal.new 1026194943235357770434981633846801087750690719)
            (Decimal.new "38450830483049850394093.48579374987938934" * Decimal.new "297349287397297.2394279379287398729879234") . should_equal (Decimal.new "11433327043969147404767677628296882442.487387236451853113753778864149360386696556")

            (Decimal.new 1026194943235357770434981633846801087750690719 / Decimal.new 273948729872398729387) . should_equal (Decimal.new 3745937948729837923798237)
            (Decimal.new "11433327043969147404767677628296882442.487387236451853113753778864149360386696556" / Decimal.new "297349287397297.2394279379287398729879234") . should_equal (Decimal.new "38450830483049850394093.48579374987938934")

        group_builder.specify "should allow arithmetic with Decimals, with precision setting (examples)" <|
             (Decimal.new "10.22") . add (Decimal.new "20.33") (Math_Context.new 3) . should_equal (Decimal.new 30.6)
             (Decimal.new "20.33") . subtract (Decimal.new "10.22") (Math_Context.new 3) . should_equal (Decimal.new 10.1)
             (Decimal.new "10.22") . multiply (Decimal.new "20.33") (Math_Context.new 4) . should_equal (Decimal.new 207.8)
             (Decimal.new "1065.9378") . divide (Decimal.new "23.34") (Math_Context.new 3) . should_equal (Decimal.new 45.7)

        group_builder.specify "should allow arithmetic with Decimals, with precision setting" <|
            (Decimal.new 213427523957 . add (Decimal.new 93849398884384) (Math_Context.new 8)) . should_equal (Decimal.new 94062826000000)
            (Decimal.new "723579374753.3535345" . add (Decimal.new "35263659267.23434535") (Math_Context.new 12)) . should_equal (Decimal.new "758843034021")

            (Decimal.new -29388920982834 . subtract (Decimal.new 842820) (Math_Context.new 7)) . should_equal (Decimal.new -29388920000000)
            (Decimal.new "-8273762787.3535345" . subtract (Decimal.new "76287273.23434535") (Math_Context.new 10)) . should_equal (Decimal.new "-8350050061")

            (Decimal.new 7297927982888383 . multiply  (Decimal.new 828737) (Math_Context.new 6)) . should_equal (Decimal.new 6048060000000000000000 )
            (Decimal.new "893872388.3535345" . multiply  (Decimal.new "72374727737.23434535") (Math_Context.new 14)) . should_equal (Decimal.new "64693770738918000000")

            (Decimal.new "909678645268840" . divide (Decimal.new "28029830") (Math_Context.new 6)) . should_equal (Decimal.new "32453900 ")
            (Decimal.new "384456406.7860325392609633764" . divide (Decimal.new "24556.125563546") (Math_Context.new 7)) . should_equal (Decimal.new "15656.23")

            (Decimal.new 3948539458034580838458034803485 . add (Decimal.new 237957498573948579387495837459837) (Math_Context.new 20)) . should_equal (Decimal.new 241906038031983160230000000000000)
            (Decimal.new "927349527347587934.34573495739475938745" . add (Decimal.new "37593874597239487593745.3457973847574") (Math_Context.new 24)) . should_equal (Decimal.new "37594801946766835181679.7")

            (Decimal.new -239485787538745937495873495759598 . subtract (Decimal.new 273958739485793475934793745) (Math_Context.new 12)) . should_equal (Decimal.new -239486061497000000000000000000000)
            (Decimal.new "-79237492374927979579239292.293749287928373" . subtract (Decimal.new "239729379279872947923947.234273947927397239") (Math_Context.new 16)) . should_equal (Decimal.new "-79477221754207850000000000")

            (Decimal.new 3745937948729837923798237 . multiply  (Decimal.new 273948729872398729387) (Math_Context.new 21)) . should_equal (Decimal.new 1026194943235357770430000000000000000000000000)
            (Decimal.new "38450830483049850394093.48579374987938934" . multiply  (Decimal.new "297349287397297.2394279379287398729879234") (Math_Context.new 35)) . should_equal (Decimal.new "11433327043969147404767677628296882000")

            (Decimal.new 1026194943235357770434981633846801087750690719 . divide (Decimal.new 273948729872398729387) (Math_Context.new 10)) . should_equal (Decimal.new 3745937949000000000000000)
            (Decimal.new "11433327043969147404767677628296882442.487387236451853113753778864149360386696556" . divide (Decimal.new "297349287397297.2394279379287398729879234") (Math_Context.new 9)) . should_equal (Decimal.new "38450830500000000000000")

        group_builder.specify "should allow arithmetic with Decimals, with precision setting and rounding mode" <|
            (Decimal.new 3.4 . add (Decimal.new 20.05) (Math_Context.new 3)) . should_equal (Decimal.new 23.5)
            (Decimal.new 3.4 . add (Decimal.new 20.05) (Math_Context.new 3 Rounding_Mode.bankers)) . should_equal (Decimal.new 23.4)
            (Decimal.new -3.4 . add (Decimal.new -20.05) (Math_Context.new 3)) . should_equal (Decimal.new -23.5)
            (Decimal.new -3.4 . add (Decimal.new -20.05) (Math_Context.new 3 Rounding_Mode.bankers)) . should_equal (Decimal.new -23.4)
            (Decimal.new -867.625 . subtract (Decimal.new -33.05) (Math_Context.new 5)) . should_equal (Decimal.new -834.58)
            (Decimal.new -867.625 . subtract (Decimal.new -33.05) (Math_Context.new 5 Rounding_Mode.bankers)) . should_equal (Decimal.new -834.58)
            (Decimal.new 49.31 . multiply (Decimal.new 5) (Math_Context.new 4)) . should_equal (Decimal.new 246.6)
            (Decimal.new 49.31 . multiply (Decimal.new 5) (Math_Context.new 4 Rounding_Mode.bankers)) . should_equal (Decimal.new 246.6)
            (Decimal.new 49.29 . multiply (Decimal.new 5) (Math_Context.new 4)) . should_equal (Decimal.new 246.5)
            (Decimal.new 49.29 . multiply (Decimal.new 5) (Math_Context.new 4 Rounding_Mode.bankers)) . should_equal (Decimal.new 246.4)
            (Decimal.new 247.75 . divide (Decimal.new -5) (Math_Context.new 3)) . should_equal (Decimal.new -49.6)
            (Decimal.new 247.75 . divide (Decimal.new -5) (Math_Context.new 3 Rounding_Mode.bankers)) . should_equal (Decimal.new -49.6)

        group_builder.specify "should allow mixed arithmetic" <|
            (Decimal.new 1 + 2) . should_equal 3
            (Decimal.new 1 - 2) . should_equal -1
            (Decimal.new 3 * 4) . should_equal 12
            (Decimal.new 3 / 4) . should_equal 0.75

            (1 + Decimal.new 2) . should_equal 3
            (1 - Decimal.new 2) . should_equal -1
            (3 * Decimal.new 4) . should_equal 12
            (3 / Decimal.new 4) . should_equal 0.75

            (Decimal.new 1 + 2.0) . should_equal 3
            (Decimal.new 1 - 2.0) . should_equal -1
            (Decimal.new 3 * 4.0) . should_equal 12
            (Decimal.new 3 / 4.0) . should_equal 0.75

            (1 + Decimal.new 2.0) . should_equal 3
            (1 - Decimal.new 2.0) . should_equal -1
            (3 * Decimal.new 4.0) . should_equal 12
            (3 / Decimal.new 4.0) . should_equal 0.75

        group_builder.specify "should get an aritmetic error when a result is a nonterminating decimal expansion" <|
            (Decimal.new 1 / Decimal.new 3) . should_fail_with Arithmetic_Error

        group_builder.specify "should negate values correctly" <|
            Decimal.new 5 . negate . should_equal -5
            Decimal.new -5 . negate . should_equal 5
            Decimal.new 5.3 . negate . should_equal -5.3
            Decimal.new -5.3 . negate . should_equal 5.3
            Decimal.new 0 . negate . should_equal 0
            Decimal.new -0 . negate . should_equal 0
            d = Decimal.new 5
            nd = -d
            nd . should_equal -5
            d2 = Decimal.new -5
            nd2 = -d2
            nd2 . should_equal 5

    suite_builder.group "conversions" group_builder->
        group_builder.specify "should convert correctly to and from Integer" <|
            a = Decimal.new "12000"
            b = Decimal.new "12000" (Math_Context.new 2)
            c = Decimal.new "12000" (Math_Context.new 3)
            d = Decimal.new "2345.6"
            huge_a = Decimal.new "3.4E320"
            huge_b = Decimal.new "3.400E320"
            huge_c = Decimal.new "3.4000000E320"
            huge_integer = 34 * (10 ^ 319)

            a.to_integer . should_equal 12000
            b.to_integer . should_equal 12000
            c.to_integer . should_equal 12000
            d.to_integer . should_equal 2345
            huge_a.to_integer . should_equal huge_integer
            huge_b.to_integer . should_equal huge_integer
            huge_c.to_integer . should_equal huge_integer

            (-a).to_integer . should_equal -12000
            (-b).to_integer . should_equal -12000
            (-c).to_integer . should_equal -12000
            (-d).to_integer . should_equal -2345
            (-huge_a).to_integer . should_equal -huge_integer
            (-huge_b).to_integer . should_equal -huge_integer
            (-huge_c).to_integer . should_equal -huge_integer

        group_builder.specify "should convert correctly to Float" <|
            a = Decimal.new "12000"
            b = Decimal.new "12000" (Math_Context.new 2)
            c = Decimal.new "12000" (Math_Context.new 3)
            huge_a = Decimal.new "3.4E300"
            huge_b = Decimal.new "3.400E300"
            huge_c = Decimal.new "3.4000000E300"
            huge_float = 3.4 * (10 ^ 300)

            a.to_float . should_equal 12000.0
            b.to_float . should_equal 12000.0
            c.to_float . should_equal 12000.0
            huge_a.to_float . should_equal huge_float
            huge_b.to_float . should_equal huge_float
            huge_c.to_float . should_equal huge_float

            (-a).to_float . should_equal -12000
            (-b).to_float . should_equal -12000
            (-c).to_float . should_equal -12000
            (-huge_a).to_float . should_equal -huge_float
            (-huge_b).to_float . should_equal -huge_float
            (-huge_c).to_float . should_equal -huge_float

        group_builder.specify "attaches a warning to the result of .to_float when it is out the representable range" <|
            huge_a = Decimal.new "3.4E320"
            f = huge_a.to_float
            f.should_equal Number.positive_infinity
            Problems.expect_only_warning (Out_Of_Range.Error huge_a "Outside representable Float range (approximately (-1.8E308, 1.8E308))") f
            Warning.get_all f . at 0 . value . to_display_text . should_equal "Value out of range: 3.4E+320: Outside representable Float range (approximately (-1.8E308, 1.8E308))"
            f2 = (-huge_a).to_float
            f2.should_equal Number.negative_infinity
            Problems.expect_only_warning (Out_Of_Range.Error -huge_a "Outside representable Float range (approximately (-1.8E308, 1.8E308))") f2
            Warning.get_all f2 . at 0 . value . to_display_text . should_equal "Value out of range: -3.4E+320: Outside representable Float range (approximately (-1.8E308, 1.8E308))"

        group_builder.specify "attaches a warning to the result of .to_float when it results in a loss of precision" <|
            Problems.expect_only_warning Loss_Of_Numeric_Precision (Decimal.new "0.1" . to_float)

        group_builder.specify "should convert correctly to Float using implicit conversions" <|
            f = Float.from (Decimal.new "56.34")
            f.should_be_a Float
            f.should_equal 56.34

        group_builder.specify "Decimal.to_float cannot compare correctly with the original Decimal" <|
            huge_a = Decimal.new "3.4E300"
            huge_a_float = Float.from huge_a

            (huge_a_float == huge_a) . should_be_false
            (huge_a == huge_a_float) . should_be_false

        group_builder.specify "Decimal.to_integer should compare correctly with the original Decimal" <|
            huge_a = Decimal.new "3.4E320"
            huge_a_int = huge_a.to_integer

            (huge_a_int == huge_a) . should_be_true
            (huge_a == huge_a_int) . should_be_true

        group_builder.specify "should attach a warning on loss of precision in integer conversion" <|
            Problems.expect_only_warning Loss_Of_Numeric_Precision (Decimal.new "125.2" . to_integer)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (Decimal.new "125" . to_integer)
            huge_int = Decimal.new "125E90"
            huge_fraction = Decimal.new "125E90" + Decimal.new "0.2"
            Problems.expect_only_warning Loss_Of_Numeric_Precision (huge_fraction . to_integer)
            Problems.not_expect_warning Loss_Of_Numeric_Precision (huge_int . to_integer)

    suite_builder.group "remainder" group_builder->
        group_builder.specify "should define remainder" <|
            cases = []
                + [[5, 3, 2], [5.0, 3.0, 2.0], [3.5, 2, 1.5], [10.5, 1.0, 0.5], [3, 1, 0], [3.0, 1.0, 0]]
                + [[-5, 3, -2], [-5.0, 3.0, -2.0], [-3.5, 2, -1.5], [-10.5, 1.0, -0.5], [-3, 1, 0], [-3.0, 1.0, 0]]
                + [[2.7, 0.5, 0.2], [2.7, 0.4, 0.3, 0.001], [-2.7, 0.5, -0.2], [-2.7, 0.4, -0.3, 0.001]]
                + [["9223372036854775807", 10, 7], ["9223372036854775808", 10, 8], ["922337203685477580000000000008", 10, 8]]
                + [["-9223372036854775808", 10, -8], ["-9223372036854775809", 10, -9], ["-922337203685477580000000000008", 10, -8]]
            cases.map c-> Test.with_clue ("["+c.to_text+"] ") <|
                base = c.at 0
                modulus = c.at 1
                residue = c.at 2
                epsilon = if c.length > 3 then c.at 3 else 0.0
                (Decimal.new base % modulus) . should_equal epsilon=epsilon residue
                (Decimal.new base % Decimal.new modulus) . should_equal residue

        group_builder.specify "should define remainder (example)" <|
            (Decimal.new 10 . remainder 3) . should_equal 1
            (Decimal.new 10 % 3) . should_equal 1

        group_builder.specify "remainder 0 should throw" <|
            (Decimal.new 3 % 0) . should_fail_with Arithmetic_Error
            (Decimal.new 3 % Decimal.new 0) . should_fail_with Arithmetic_Error

    suite_builder.group "div" group_builder->
        group_builder.specify "should define div" <|
            Decimal.new "10" . div (Decimal.new "3") . should_equal 3
            Decimal.new "10.28" . div (Decimal.new "3.01") . should_equal 3

            Decimal.new "35" . div (Decimal.new "6") . should_equal 5
            Decimal.new "-35" . div (Decimal.new "6") . should_equal -5
            Decimal.new "35" . div (Decimal.new "-6") . should_equal -5
            Decimal.new "-35" . div (Decimal.new "-6") . should_equal 5
            Decimal.new "35.0" . div (Decimal.new "6") . should_equal 5
            Decimal.new "35.3" . div (Decimal.new "6") . should_equal 5

            Decimal.new "35" . div (Decimal.new "5") . should_equal 7

            Decimal.new "0" . div (Decimal.new "5") . should_equal 0

            Decimal.new "12" . div (Decimal.new "0") . should_fail_with Arithmetic_Error

    suite_builder.group "pow" group_builder->
        group_builder.specify "should define pow" <|
            Decimal.new "10" . pow 3 . should_equal 1000

            (Decimal.new "10" ^ 3) . should_equal 1000

            (Decimal.new "-10" ^ 2) . should_equal 100
            (Decimal.new "-10" ^ 3) . should_equal -1000

            (Decimal.new "2" ^ 5) . should_equal 32
            (Decimal.new "3" ^ 4) . should_equal 81
            (Decimal.new "-2" ^ 5) . should_equal -32
            (Decimal.new "-3" ^ 4) . should_equal 81

            (Decimal.new "2.25" ^ 5) . should_equal 57.6650390625

            (Decimal.new "10" ^ 1) . should_equal 10
            (Decimal.new "2" ^ 1) . should_equal 2
            (Decimal.new "10" ^ 0) . should_equal 1
            (Decimal.new "2" ^ 0) . should_equal 1

            (Decimal.new "23234" ^ 12) . should_equal (Decimal.new "24745020631916033678933049360198248076412726408646656")
            (Decimal.new "-794" ^ 112) . should_equal (Decimal.new "6024156861645760455373941610695035918372130160062114486642167348130629475133139191309665922068844301194118714216190697635299124619812230483098091272538558376111325623532711124479664789034731517753138259958467197045503553217529624389271803885423122798234927557537822587658929087103065356345719502482054440067247048272417652736")

        group_builder.specify "should throw an error for exponent out of range" <|
            Decimal.new "10" . pow -1 . should_fail_with Arithmetic_Error
            Decimal.new "10" . pow 99999999999 . should_fail_with Arithmetic_Error

    suite_builder.group "text conversion" group_builder->
        group_builder.specify "should convert to text correctly" <|
            Decimal.new "34.56" . to_text . should_equal "34.56"
            Decimal.new "34.56" . to_display_text . should_equal "34.56"
            Decimal.new "123E80" . to_text . should_equal "1.23E+82"
            Decimal.new "123E80" . to_display_text . should_equal "1.23E+82"
            Decimal.new "0.00016E-20" . to_text . should_equal "1.6E-24"
            Decimal.new "0.00016E-20" . to_display_text . should_equal "1.6E-24"

            Decimal.new "-34.56" . to_text . should_equal "-34.56"
            Decimal.new "-34.56" . to_display_text . should_equal "-34.56"
            Decimal.new "-123E80" . to_text . should_equal "-1.23E+82"
            Decimal.new "-123E80" . to_display_text . should_equal "-1.23E+82"
            Decimal.new "-0.00016E-20" . to_text . should_equal "-1.6E-24"
            Decimal.new "-0.00016E-20" . to_display_text . should_equal "-1.6E-24"

        group_builder.specify "should convert to text without scientific notation correctly" <|
            Decimal.new "34.56" . to_text_without_scientific_notation . should_equal "34.56"
            Decimal.new "123E80" . to_text_without_scientific_notation . should_equal "12300000000000000000000000000000000000000000000000000000000000000000000000000000000"
            Decimal.new "0.00016E-20" . to_text_without_scientific_notation . should_equal "0.0000000000000000000000016"

            Decimal.new "-34.56" . to_text_without_scientific_notation . should_equal "-34.56"
            Decimal.new "-123E80" . to_text_without_scientific_notation . should_equal "-12300000000000000000000000000000000000000000000000000000000000000000000000000000000"
            Decimal.new "-0.00016E-20" . to_text_without_scientific_notation . should_equal "-0.0000000000000000000000016"

        group_builder.specify "should format correctly" <|
            d = Decimal.new "123456789.87654"

            d.format . should_equal "123,456,789.87654"
            d.format locale=Locale.italy . should_equal "123.456.789,87654"
            d.format format="#,###.##" . should_equal "123,456,789.88"
            d.format format="#,###.##" locale=Locale.italy . should_equal "123.456.789,88"
            d.format format="#,##.##" . should_equal "1,23,45,67,89.88"
            d.format format="#,##.##" locale=Locale.italy . should_equal "1.23.45.67.89,88"

        group_builder.specify "should parse correctly" <|
            Decimal.parse "123456789.87654" . should_equal 123456789.87654
            Decimal.parse "123,456,789.87654" locale=Locale.default . should_equal 123456789.87654
            Decimal.parse "123,456,789.87654" locale=Locale.us . should_equal 123456789.87654
            Decimal.parse "123.456.789,87654" locale=Locale.italy . should_equal 123456789.87654
            Decimal.parse "123,456,789.87654" locale=Locale.italy . should_equal 123.456
            Decimal.parse "123.456.789,87654" locale=Locale.us . should_equal 123.456

            Decimal.parse "123,456,789.87654" . should_fail_with Number_Parse_Error

    suite_builder.group "signs" group_builder->
        group_builder.specify "should calculate abs correctly" <|
            Decimal.new "12.345" . abs . should_equal 12.345
            Decimal.new "-12.345" . abs . should_equal 12.345
            Decimal.new "12.345E97" . abs . should_equal (Decimal.new "12.345E97")
            Decimal.new "-12.345E97" . abs . should_equal (Decimal.new "12.345E97")

        group_builder.specify "should calculate negate correctly" <|
            Decimal.new "12.345" . negate . should_equal -12.345
            Decimal.new "-12.345" . negate . should_equal 12.345
            Decimal.new "12.345E97" . negate . should_equal (Decimal.new "-12.345E97")
            Decimal.new "-12.345E97" . negate . should_equal (Decimal.new "12.345E97")

        group_builder.specify "should calculate signum correctly" <|
            Decimal.new "12.345" . signum . should_equal 1
            Decimal.new "-12.345" . signum . should_equal -1
            Decimal.new "12.345E97" . signum . should_equal 1
            Decimal.new "-12.345E97" . signum . should_equal -1
            Decimal.new "0" . signum . should_equal 0

    suite_builder.group "rounding" group_builder->
        do_round n dp=0 use_bankers=False =
            d = Decimal.new n . round dp use_bankers
            d.to_float

        Round_Spec.add_specs group_builder do_round

        group_builder.specify "Large values" <|
            Decimal.new "1234.5678E-50" . round 53 . should_equal (Decimal.new "1234.568E-50")
            Decimal.new "1234.5678E-50" . round 52 . should_equal (Decimal.new "1234.57E-50")
            Decimal.new "1234.5678E-100" . round 101 . should_equal (Decimal.new "1234.6E-100")
            Decimal.new "1234.5678E-100" . round 103 . should_equal (Decimal.new "1234.568E-100")

            Decimal.new "-1234.5678E-50" . round 53 . should_equal (Decimal.new "-1234.568E-50")
            Decimal.new "-1234.5678E-50" . round 52 . should_equal (Decimal.new "-1234.57E-50")
            Decimal.new "-1234.5678E-100" . round 101 . should_equal (Decimal.new "-1234.6E-100")
            Decimal.new "-1234.5678E-100" . round 103 . should_equal (Decimal.new "-1234.568E-100")

        group_builder.specify "Strips trailing zeros" <|
            Decimal.new "1234.5678" . round 5 . internal_representation . should_equal [12345678, 8, 4]

        group_builder.specify "Decimal places out of range" <|
            too_big_positive = Java_Integer.MAX_VALUE + 1
            too_big_negative = Java_Integer.MIN_VALUE - 1
            Decimal.new "3.1" . round too_big_positive . should_fail_with (Out_Of_Range.Error too_big_positive "round decimal_places must be between "+Java_Integer.MIN_VALUE.to_text+" and "+Java_Integer.MAX_VALUE.to_text+" (inclusive), but was "+too_big_positive.to_text)
            Decimal.new "3.1" . round too_big_negative . should_fail_with (Out_Of_Range.Error too_big_negative "round decimal_places must be between "+Java_Integer.MIN_VALUE.to_text+" and "+Java_Integer.MAX_VALUE.to_text+" (inclusive), but was "+too_big_negative.to_text)

        group_builder.specify "Examples" <|
            Decimal.new "3.3" . round . should_equal (Decimal.new "3")
            Decimal.new "3.1415" . round 2 . should_equal (Decimal.new "3.14")
            Decimal.new "1234.5678E-50" . round 53 . should_equal (Decimal.new "1234.568E-50")
            Decimal.new "2.5" . round use_bankers=True . should_equal 2

    suite_builder.group "floor, ceil, truncate" group_builder->
        group_builder.specify "should calculate floor correctly" <|
            Decimal.new "0" . floor . should_equal 0
            Decimal.new "1" . floor . should_equal 1
            Decimal.new "1.3" . floor . should_equal 1
            Decimal.new "1.5" . floor . should_equal 1
            Decimal.new "1.7" . floor . should_equal 1
            Decimal.new "-1" . floor . should_equal -1
            Decimal.new "-1.3" . floor . should_equal -2
            Decimal.new "-1.5" . floor . should_equal -2
            Decimal.new "-1.7" . floor . should_equal -2

            Decimal.new "11.3" . floor . should_equal 11
            Decimal.new "111.3" . floor . should_equal 111
            Decimal.new "2111.3" . floor . should_equal 2111
            Decimal.new "11.34" . floor . should_equal 11
            Decimal.new "111.34" . floor . should_equal 111
            Decimal.new "2111.34" . floor . should_equal 2111

            (Decimal.new "1E100" + Decimal.new "3") . floor . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.3") . floor . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.5") . floor . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.7") . floor . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "-1E100" + Decimal.new "-3") . floor . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.3") . floor . should_equal (Decimal.new "-1E100" + Decimal.new "-4")
            (Decimal.new "-1E100" + Decimal.new "-3.5") . floor . should_equal (Decimal.new "-1E100" + Decimal.new "-4")
            (Decimal.new "-1E100" + Decimal.new "-3.7") . floor . should_equal (Decimal.new "-1E100" + Decimal.new "-4")

        group_builder.specify "should calculate ceil correctly" <|
            Decimal.new "0" . ceil . should_equal 0
            Decimal.new "1" . ceil . should_equal 1
            Decimal.new "1.3" . ceil . should_equal 2
            Decimal.new "1.5" . ceil . should_equal 2
            Decimal.new "1.7" . ceil . should_equal 2
            Decimal.new "-1" . ceil . should_equal -1
            Decimal.new "-1.3" . ceil . should_equal -1
            Decimal.new "-1.5" . ceil . should_equal -1
            Decimal.new "-1.7" . ceil . should_equal -1

            Decimal.new "11.3" . ceil . should_equal 12
            Decimal.new "111.3" . ceil . should_equal 112
            Decimal.new "2111.3" . ceil . should_equal 2112
            Decimal.new "11.34" . ceil . should_equal 12
            Decimal.new "111.34" . ceil . should_equal 112
            Decimal.new "2111.34" . ceil . should_equal 2112

            (Decimal.new "1E100" + Decimal.new "3") . ceil . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.3") . ceil . should_equal (Decimal.new "1E100" + Decimal.new "4")
            (Decimal.new "1E100" + Decimal.new "3.5") . ceil . should_equal (Decimal.new "1E100" + Decimal.new "4")
            (Decimal.new "1E100" + Decimal.new "3.7") . ceil . should_equal (Decimal.new "1E100" + Decimal.new "4")
            (Decimal.new "-1E100" + Decimal.new "-3") . ceil . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.3") . ceil . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.5") . ceil . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.7") . ceil . should_equal (Decimal.new "-1E100" + Decimal.new "-3")

        group_builder.specify "should calculate truncate correctly" <|
            Decimal.new "0" . truncate . should_equal 0
            Decimal.new "1" . truncate . should_equal 1
            Decimal.new "1.3" . truncate . should_equal 1
            Decimal.new "1.5" . truncate . should_equal 1
            Decimal.new "1.7" . truncate . should_equal 1
            Decimal.new "-1" . truncate . should_equal -1
            Decimal.new "-1.3" . truncate . should_equal -1
            Decimal.new "-1.5" . truncate . should_equal -1
            Decimal.new "-1.7" . truncate . should_equal -1

            Decimal.new "11.3" . truncate . should_equal 11
            Decimal.new "111.3" . truncate . should_equal 111
            Decimal.new "2111.3" . truncate . should_equal 2111
            Decimal.new "11.34" . truncate . should_equal 11
            Decimal.new "111.34" . truncate . should_equal 111
            Decimal.new "2111.34" . truncate . should_equal 2111

            (Decimal.new "1E100" + Decimal.new "3") . truncate . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.3") . truncate . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.5") . truncate . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "1E100" + Decimal.new "3.7") . truncate . should_equal (Decimal.new "1E100" + Decimal.new "3")
            (Decimal.new "-1E100" + Decimal.new "-3") . truncate . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.3") . truncate . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.5") . truncate . should_equal (Decimal.new "-1E100" + Decimal.new "-3")
            (Decimal.new "-1E100" + Decimal.new "-3.7") . truncate . should_equal (Decimal.new "-1E100" + Decimal.new "-3")

            small = Decimal.new "1.1"
            big = Decimal.new "1E120" + small
            small.ceil . should_be_a Integer
            big.ceil . should_be_a Integer
            small.floor . should_be_a Integer
            big.floor . should_be_a Integer
            small.truncate . should_be_a Integer
            big.truncate . should_be_a Integer

        group_builder.specify "examples" <|
            Decimal.new "12.34" . floor . should_equal (Decimal.new "12")
            Decimal.new "-12.34" . floor . should_equal (Decimal.new "-13")

            Decimal.new "12.34" . ceil . should_equal (Decimal.new "13")
            Decimal.new "-12.34" . ceil . should_equal (Decimal.new "-12")

            Decimal.new "12.34" . truncate . should_equal (Decimal.new "12")
            Decimal.new "-12.34" . truncate . should_equal (Decimal.new "-12")

    suite_builder.group "min/max" group_builder->
        group_builder.specify "should calculate min and max correctly" <|
            Decimal.new "12" . min (Decimal.new "13") . should_equal (Decimal.new "12")
            Decimal.new "12" . min (Decimal.new "11") . should_equal (Decimal.new "11")
            Decimal.new "-12" . min (Decimal.new "-13") . should_equal (Decimal.new "-13")
            Decimal.new "-12" . min (Decimal.new "-11") . should_equal (Decimal.new "-12")

            Decimal.new "12.1" . min (Decimal.new "12.3") . should_equal (Decimal.new "12.1")
            Decimal.new "12.2" . min (Decimal.new "11.7") . should_equal (Decimal.new "11.7")
            Decimal.new "-12.1" . min (Decimal.new "-12.3") . should_equal (Decimal.new "-12.3")
            Decimal.new "-12.2" . min (Decimal.new "-11.7") . should_equal (Decimal.new "-12.2")

            Decimal.new "0" . min (Decimal.new "-1") . should_equal (Decimal.new "-1")
            Decimal.new "0" . min (Decimal.new "1") . should_equal (Decimal.new "0")
            Decimal.new "-1" . min (Decimal.new "0") . should_equal (Decimal.new "-1")
            Decimal.new "1" . min (Decimal.new "0") . should_equal (Decimal.new "0")

            Decimal.new "12E73" . min (Decimal.new "13E60") . should_equal (Decimal.new "13E60")
            Decimal.new "12E73" . min (Decimal.new "13E80") . should_equal (Decimal.new "12E73")
            Decimal.new "-12E73" . min (Decimal.new "-13E60") . should_equal (Decimal.new "-12E73")
            Decimal.new "-12E73" . min (Decimal.new "-13E80") . should_equal (Decimal.new "-13E80")

            Decimal.new "12" . max (Decimal.new "13") . should_equal (Decimal.new "13")
            Decimal.new "12" . max (Decimal.new "11") . should_equal (Decimal.new "12")
            Decimal.new "-12" . max (Decimal.new "-13") . should_equal (Decimal.new "-12")
            Decimal.new "-12" . max (Decimal.new "-11") . should_equal (Decimal.new "-11")

            Decimal.new "12.1" . max (Decimal.new "12.3") . should_equal (Decimal.new "12.3")
            Decimal.new "12.2" . max (Decimal.new "11.7") . should_equal (Decimal.new "12.2")
            Decimal.new "-12.1" . max (Decimal.new "-12.3") . should_equal (Decimal.new "-12.1")
            Decimal.new "-12.2" . max (Decimal.new "-11.7") . should_equal (Decimal.new "-11.7")

            Decimal.new "0" . max (Decimal.new "-1") . should_equal (Decimal.new "0")
            Decimal.new "0" . max (Decimal.new "1") . should_equal (Decimal.new "1")
            Decimal.new "-1" . max (Decimal.new "0") . should_equal (Decimal.new "0")
            Decimal.new "1" . max (Decimal.new "0") . should_equal (Decimal.new "1")

            Decimal.new "12E73" . max (Decimal.new "13E60") . should_equal (Decimal.new "12E73")
            Decimal.new "12E73" . max (Decimal.new "13E80") . should_equal (Decimal.new "13E80")
            Decimal.new "-12E73" . max (Decimal.new "-13E60") . should_equal (Decimal.new "-13E60")
            Decimal.new "-12E73" . max (Decimal.new "-13E80") . should_equal (Decimal.new "-12E73")

            Decimal.new "12" . min (Decimal.new "12.3") . should_equal (Decimal.new "12")
            Decimal.new "12.2" . min (Decimal.new "11") . should_equal (Decimal.new "11")
            Decimal.new "-12" . min (Decimal.new "-12.3") . should_equal (Decimal.new "-12.3")
            Decimal.new "-12.2" . min (Decimal.new "-11") . should_equal (Decimal.new "-12.2")

        group_builder.specify "should calculate min and max correctly, with mixed Decimal and Int/Float" <|
            Decimal.new "12" . min 13 . should_equal (Decimal.new "12")
            12 . min (Decimal.new "13") . should_equal (Decimal.new "12")

            Decimal.new "12.1" . min 12.3 . should_equal (Decimal.new "12.1")
            12.1 . min (Decimal.new "12.3") . should_equal (Decimal.from 12.1)

            Decimal.new "0" . min (Decimal.new "-1") . should_equal (Decimal.new "-1")
            0 . min (Decimal.new "-1") . should_equal (Decimal.new "-1")

            Decimal.new "12" . max 13 . should_equal (Decimal.new "13")
            12 . max (Decimal.new "13") . should_equal (Decimal.new "13")

            Decimal.new "12.1" . max 12.3 . should_equal (Decimal.new "12.3")
            12.1 . max (Decimal.new "12.3") . should_equal (Decimal.new "12.3")

            Decimal.new "0" . max -1 . should_equal (Decimal.new "0")
            0 . max (Decimal.new "-1") . should_equal (Decimal.new "0")

            Decimal.new "12" . min 12.3 . should_equal (Decimal.new "12")
            12 . min (Decimal.new "12.3") . should_equal (Decimal.new "12")

            Decimal.new "12" . max 12.3 . should_equal (Decimal.new "12.3")
            12 . max (Decimal.new "12.3") . should_equal (Decimal.new "12.3")

        group_builder.specify "should calculate min and max correctly, with Math.min/max" <|
            Math.min (Decimal.new "12") (Decimal.new "13") . should_equal (Decimal.new "12")
            Math.max (Decimal.new "12") (Decimal.new "13") . should_equal (Decimal.new "13")

            Math.min (Decimal.new "12E70") (Decimal.new "13E70") . should_equal (Decimal.new "12E70")
            Math.max (Decimal.new "12E70") (Decimal.new "13E70") . should_equal (Decimal.new "13E70")

    suite_builder.group "Integer/Float .to_decimal" group_builder->
        group_builder.specify ".to_decimal should convert to Decimal" <|
            12 . to_decimal . should_be_a Decimal
            12.3 . to_decimal . should_be_a Decimal

        group_builder.specify "Float.to_decimal should attach a warning" <|
            Problems.expect_warning Loss_Of_Numeric_Precision (12.3 . to_decimal)

        group_builder.specify "examples" <|
            12 . to_decimal . should_equal (Decimal.new "12")
            12.3 . to_decimal . should_equal (Decimal.new "12.3")

    suite_builder.group "BigDecimal internal representation methods" group_builder->
        group_builder.specify "internal accessors should work correctly" <|
            d = Decimal.new "123.456"
            d.precision . should_equal 6
            d.scale . should_equal 3
            d.unscaled_value . should_equal 123456
            d.internal_representation . should_equal [123456, 6, 3]

main =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter
