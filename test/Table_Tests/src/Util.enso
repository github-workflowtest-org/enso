from Standard.Base import all

import Standard.Database.DB_Table.DB_Table
import Standard.Database.DB_Column.DB_Column
from Standard.Table import Column, Table

from Standard.Test import all

polyglot java import org.enso.base_test_helpers.FileSystemHelper

Table.should_equal : Any -> Integer -> Any
Table.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    Panic.catch Test_Failure_Error (table_should_equal_impl self expected loc) error->
        Test.fail error.payload.message 

Column.should_equal : Any -> Integer -> Any
Column.should_equal self expected frames_to_skip=0 =
    loc = Meta.get_source_location 1+frames_to_skip
    Panic.catch Test_Failure_Error (column_should_equal_impl self expected loc) error->
        Test.fail error.payload.message

DB_Table.should_equal : DB_Table -> Integer -> Any
DB_Table.should_equal self expected frames_to_skip=0 =
    t0 = self.read
    t1 = expected.read
    t0 . should_equal t1 frames_to_skip

DB_Column.should_equal : DB_Column -> Integer -> Any
DB_Column.should_equal self expected frames_to_skip=0 =
    t0 = self.read
    t1 = expected.read
    t0 . should_equal t1 frames_to_skip

type Test_Failure_Error
    ## PRIVATE
       The runtime representation of a test failure.

       Arguments:
       - message: A description of the test failure.
    Error message

    ## PRIVATE
    to_display_text : Text
    to_display_text self = "Test failure error: "+self.message

## PRIVATE
table_should_equal_impl actual expected loc =
    case expected of
        _ : Table ->
            if actual.columns.length != expected.columns.length then
                Panic.throw (Test_Failure_Error.Error 'Tables differ at '+loc+'.\nActual:\n'+actual.display+'\nExpected:\n'+expected.display+'\nExpected '+expected.columns.length.to_text+" columns, but got "+actual.columns.length.to_text+'.')
            Panic.catch Test_Failure_Error (actual.columns.zip expected.columns a-> e->(column_should_equal_impl a e)) error->
                msg = 'Tables differ at '+loc+'.\nActual:\n'+actual.display+'\nExpected:\n'+expected.display+'\n'+error.payload.message
                Panic.throw (Test_Failure_Error.Error msg)
        _ -> Panic.throw (Test_Failure_Error.Error "Got a Table, but expected a "+expected.to_display_text+(display_loc loc)+'.')

## PRIVATE
column_should_equal_impl actual expected loc='' =
    case expected of
        _ : Column ->
            if actual.name != expected.name then
                Panic.throw (Test_Failure_Error.Error "Expected column name "+expected.name+", but got "+actual.name+(display_loc loc)+'.')
            if actual.length != expected.length then
                Panic.throw (Test_Failure_Error.Error "Expected column length "+expected.length.to_text+", but got "+actual.length.to_text+(display_loc loc)+'.')
            if actual.value_type != expected.value_type then
                Panic.throw (Test_Failure_Error.Error "Expected column type "+expected.value_type.to_text+", but got "+actual.value_type.to_text+(display_loc loc)+'.')
            actual.zip expected a-> e->
                if values_equal a e then
                    report_fail actual expected loc
        _ -> Panic.throw (Test_Failure_Error.Error "Got a Column, but expected a "+expected.to_display_text+(display_loc loc)+'.')

## PRIVATE
values_equal a e =
    a != e && (a.is_a Number && e.is_a Number && a.is_nan && e.is_nan).not

## PRIVATE
report_fail actual expected loc =
    indexed = actual.zip (0.up_to actual.length) a-> i-> Pair.new a i
    indexed.zip expected a-> e->
        if values_equal a.first e then
            Panic.throw (Test_Failure_Error.Error "Column: "+actual.name+" differs at row "+a.second.to_text+'.\n\t  Actual  : '+a.first.to_text+'\n\t  Expected: '+e.to_text+'\n\t'+(display_loc loc)+'.')

## PRIVATE
display_loc loc:Text =
    if loc.is_empty then '' else
        ' (at '+loc+')'

normalize_lines string line_separator=Line_Ending_Style.Unix.to_text newline_at_end=True =
    case newline_at_end of
        True -> string.lines.join line_separator suffix=line_separator
        False -> string.lines.join line_separator

set_writable file writable =
    path = file.absolute.path
    FileSystemHelper.setWritable path writable
