from Standard.Base import all
from Standard.Table import Column, Table
from project.Util import all
from Standard.Test import all

add_specs suite_builder =
    suite_builder.group "Column should_equal" group_builder->
        group_builder.specify "Two Columns Are Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column.should_equal expected_column
        group_builder.specify "Two Columns With Different Name are Not Equal" <|
            expected_column = Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col2" ["Quis", "custodiet", "ipsos", "custodes?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column name Col1, but got Col2 (at LOCATION_PATH)."
        group_builder.specify "Two Columns With Different Lengths are Not Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column length 4, but got 3 (at LOCATION_PATH)."
        group_builder.specify "Two Columns with different content Are Not Equal" <|
            expected_column = Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "Col" ["Who", "guards", "the", "guards?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: Col differs at row 0.\n\t  Actual  : Who\n\t  Expected: Quis\n\t (at LOCATION_PATH).'
        group_builder.specify "Two Columns Are Not Equal in Row 3" <|
            expected_column = Column.from_vector "My Column" ["Quis", "custodiet", "ipsos", "custodes?"]
            actual_column = Column.from_vector "My Column" ["Quis", "custodiet", "ipsos", "guards?"]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal 'Column: My Column differs at row 3.\n\t  Actual  : guards?\n\t  Expected: custodes?\n\t (at LOCATION_PATH).'
        group_builder.specify "Two Columns with different types Are Not Equal" <|
            expected_column = Column.from_vector "Col" ["1", "2", "3", "4"]
            actual_column = Column.from_vector "Col" [1, 2, 3, 4]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Expected column type (Char Nothing True), but got (Integer 64 bits) (at LOCATION_PATH)."
        group_builder.specify "Comparing a Column to non column" <|
            expected_column = 42
            actual_column = Column.from_vector "Col" [1, 2, 3, 4]
            res = Panic.recover Test_Failure_Error (column_should_equal_impl actual_column expected_column "LOCATION_PATH")
            res.catch.message.should_equal "Got a Column, but expected a 42 (at LOCATION_PATH)."
        group_builder.specify "Two Columns Containg NaNs Are Equal" <|
            # This is somewhat of a special case, as NaN != NaN but for the purposes of testing we consider them equal
            expected_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            actual_column = Column.from_vector "Col" [1.0, 2.0, Number.nan]
            actual_column.should_equal expected_column
    suite_builder.group "Table should_equal" group_builder->
        group_builder.specify "Two Tables Are Equal" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table.should_equal expected_table    
        group_builder.specify "Two Tables With Different Values" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "teh", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH")
            res.catch.message.should_end_with 'Column: Col2 differs at row 2.\n\t  Actual  : teh\n\t  Expected: the\n\t.'
        group_builder.specify "Tables different number of columns" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH")
            res.catch.message.should_end_with "Expected 1 columns, but got 2."
        group_builder.specify "Tables different number of columns2" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH")
            res.catch.message.should_end_with "Expected 2 columns, but got 1."
        group_builder.specify "Tables With Mismatched Column names" <|
            expected_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            actual_table = Table.new [Column.from_vector "Col" ["Quis", "custodiet", "ipsos", "custodes?"], Column.from_vector "Col2" ["Who", "guards", "the", "guards?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH")
            res.catch.message.should_end_with "Expected column name Col1, but got Col."
        group_builder.specify "Comparing a Table to non Table" <|
            expected_table = 42
            actual_table = Table.new [Column.from_vector "Col1" ["Quis", "custodiet", "ipsos", "custodes?"]]
            res = Panic.recover Test_Failure_Error (table_should_equal_impl actual_table expected_table "LOCATION_PATH")
            res.catch.message.should_equal "Got a Table, but expected a 42 (at LOCATION_PATH)."

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter
