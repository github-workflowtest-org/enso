from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Common.Type_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from Standard.Table import all
from Standard.Table.Errors import all

from Standard.Test import all


from project.Common_Table_Operations.Util import all

main filter=Nothing = run_default_backend add_specs filter

type Data
    Value ~connection

    setup create_connection_fn =
        Data.Value (create_connection_fn Nothing)

    teardown self =
        self.connection.close


add_specs suite_builder setup =
    prefix = setup.prefix
    create_connection_fn = setup.create_connection_func
    pending_datetime = if setup.test_selection.date_time.not then "Date/Time operations are not supported by this backend."
    suite_builder.group prefix+"Table.set with Simple_Expression" group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "arithmetics" <|
            t = table_builder [["A", [1, 2]], ["B", [10, 40]]]
            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Copy) "C" . at "C" . to_vector . should_equal [1, 2]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Add (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [11, 42]
            t.set (Simple_Expression.From 100 (Simple_Calculation.Add (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [110, 140]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Add 100)) "C" . at "C" . to_vector . should_equal [101, 102]
            t.set (Simple_Expression.From 23 (Simple_Calculation.Add 100)) "C" . at "C" . to_vector . should_equal [123, 123]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Subtract (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [-9, -38]
            t.set (Simple_Expression.From 100 (Simple_Calculation.Subtract (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [90, 60]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Subtract 100)) "C" . at "C" . to_vector . should_equal [-99, -98]
            t.set (Simple_Expression.From 23 (Simple_Calculation.Subtract 100)) "C" . at "C" . to_vector . should_equal [-77, -77]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Multiply (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [10, 80]
            t.set (Simple_Expression.From 100 (Simple_Calculation.Multiply (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [1000, 4000]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Multiply 100)) "C" . at "C" . to_vector . should_equal [100, 200]
            t.set (Simple_Expression.From 23 (Simple_Calculation.Multiply 100)) "C" . at "C" . to_vector . should_equal [2300, 2300]

            t.set (Simple_Expression.From (Column_Ref.Name "B") (Simple_Calculation.Divide (Column_Ref.Name "A"))) "C" . at "C" . to_vector . should_equal [10, 20]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Divide (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [0.1, 0.05]
            t.set (Simple_Expression.From 1 (Simple_Calculation.Divide (Column_Ref.Name "A"))) "C" . at "C" . to_vector . should_equal [1, 0.5]
            t.set (Simple_Expression.From 1 (Simple_Calculation.Divide 2)) "C" . at "C" . to_vector . should_equal [0.5, 0.5]

            t2 = table_builder [["A", [23, 42]], ["B", [10, 3]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Mod (Column_Ref.Name "B"))) "C" . at "C" . to_vector . should_equal [3, 0]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Mod 10)) "C" . at "C" . to_vector . should_equal [3, 2]
            t2.set (Simple_Expression.From 7 (Simple_Calculation.Mod 5)) "C" . at "C" . to_vector . should_equal [2, 2]

            t.set (Simple_Expression.From (Column_Ref.Name "B") (Simple_Calculation.Power (Column_Ref.Name "A"))) "C" . at "C" . to_vector . should_equal [10, 1600]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Power 3)) "C" . at "C" . to_vector . should_equal [1, 8]
            t.set (Simple_Expression.From 2 (Simple_Calculation.Power (Column_Ref.Name "A"))) "C" . at "C" . to_vector . should_equal [2, 4]
            t.set (Simple_Expression.From 3 (Simple_Calculation.Power 4)) "C" . at "C" . to_vector . should_equal [81, 81]

            Test.expect_panic Type_Error <| t.set (Simple_Expression.From "x" (Simple_Calculation.Subtract "y"))
            t.set (Simple_Expression.From 42 (Simple_Calculation.Add "y")) . should_fail_with Illegal_Argument

        group_builder.specify "rounding" <|
            t = table_builder [["A", [1.13333, 122.74463, 32.52424, -12.7]]]
            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Round) "Z" . at "Z" . to_vector . should_equal [1, 123, 33, -13]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Round precision=1)) "Z" . at "Z" . to_vector . should_equal [1.1, 122.7, 32.5, -12.7]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Round precision=-1)) "Z" . at "Z" . to_vector . should_equal [0, 120, 30, -10]

            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Ceil) "Z" . at "Z" . to_vector . should_equal [2, 123, 33, -12]
            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Floor) "Z" . at "Z" . to_vector . should_equal [1, 122, 32, -13]
            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Truncate) "Z" . at "Z" . to_vector . should_equal [1, 122, 32, -12]

            t.set (Simple_Expression.From "1.23" Simple_Calculation.Round) . should_fail_with Invalid_Value_Type
            t.set (Simple_Expression.From "1.23" Simple_Calculation.Truncate) . should_fail_with Invalid_Value_Type

        group_builder.specify "date/time" pending=pending_datetime <|
            t = table_builder [["A", [Date_Time.new 2023 1 12 12 45, Date_Time.new 2020 5 12 1 45]], ["B", [Date_Time.new 2023 1 15 18 45, Date_Time.new 2020 6 12 22 20]], ["x", [1, 3]]]

            # TODO ticket for truncate for DB
            if setup.is_database.not then
                t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Truncate) "Z" . at "Z" . to_vector . should_equal [Date.new 2023 1 12, Date.new 2020 5 12]
                t.set (Simple_Expression.From (Date_Time.new 1999 12 10 14 55 11) Simple_Calculation.Truncate) "Z" . at "Z" . to_vector . should_equal [Date.new 1999 12 10, Date.new 1999 12 10]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Date_Add (Column_Ref.Name "x"))) "Z" . at "Z" . to_vector . should_equal_tz_agnostic [Date_Time.new 2023 1 13 12 45, Date_Time.new 2020 5 15 1 45]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Date_Add 10 Date_Period.Year)) "Z" . at "Z" . to_vector . should_equal_tz_agnostic [Date_Time.new 2033 1 12 12 45, Date_Time.new 2030 5 12 1 45]
            t.set (Simple_Expression.From (Date_Time.new 2001 12 15 11 00) (Simple_Calculation.Date_Add 10 Time_Period.Minute)) "Z" . at "Z" . to_vector . should_equal_tz_agnostic [Date_Time.new 2001 12 15 11 10, Date_Time.new 2001 12 15 11 10]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Date_Diff (Column_Ref.Name "B") Date_Period.Day)) "Z" . at "Z" . to_vector . should_equal [3, 31]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Date_Part Date_Period.Year)) "Z" . at "Z" . to_vector . should_equal [2023, 2020]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Date_Part Time_Period.Minute)) "Z" . at "Z" . to_vector . should_equal [45, 45]

            t2 = table_builder [["C", [Date.new 2002 12 10, Date.new 2005 01 01]], ["D", [Time_Of_Day.new 12 45, Time_Of_Day.new 01 01]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "C") (Simple_Calculation.Date_Add 5 Date_Period.Month)) "Z" . at "Z" . to_vector . should_equal [Date.new 2003 5 10, Date.new 2005 6 01]
            t2.set (Simple_Expression.From (Column_Ref.Name "D") (Simple_Calculation.Date_Add 15 Time_Period.Hour)) "Z" . at "Z" . to_vector . should_equal [Time_Of_Day.new 03 45, Time_Of_Day.new 16 01]

            t2.set (Simple_Expression.From (Column_Ref.Name "C") (Simple_Calculation.Date_Diff (Date.new 2003) Date_Period.Year)) "Z" . at "Z" . to_vector . should_equal [0, -2]
            t2.set (Simple_Expression.From (Column_Ref.Name "D") (Simple_Calculation.Date_Diff (Time_Of_Day.new 13) Time_Period.Minute)) "Z" . at "Z" . to_vector . should_equal [15, 59+(60*11)]

            t2.set (Simple_Expression.From (Column_Ref.Name "C") (Simple_Calculation.Date_Part Date_Period.Year)) "Z" . at "Z" . to_vector . should_equal [2002, 2005]
            t2.set (Simple_Expression.From (Column_Ref.Name "D") (Simple_Calculation.Date_Part Time_Period.Minute)) "Z" . at "Z" . to_vector . should_equal [45, 1]

            # error handling
            t2.set (Simple_Expression.From (Column_Ref.Name "C") (Simple_Calculation.Date_Part Time_Period.Second)) . should_fail_with Illegal_Argument
            t2.set (Simple_Expression.From (Column_Ref.Name "D") (Simple_Calculation.Date_Add 5 Date_Period.Year)) . should_fail_with Illegal_Argument
            t.set (Simple_Expression.From (Column_Ref.Name "x") (Simple_Calculation.Date_Part Date_Period.Year)) . should_fail_with Invalid_Value_Type
            Test.expect_panic Type_Error <| t2.set (Simple_Expression.From 42 (Simple_Calculation.Date_Diff "x" Date_Period.Year))

        group_builder.specify "boolean" <|
            t = table_builder [["A", [True, False]], ["T", [True, True]]]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.And (Column_Ref.Name "T"))) "Z" . at "Z" . to_vector . should_equal [True, False]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.And False)) "Z" . at "Z" . to_vector . should_equal [False, False]
            t.set (Simple_Expression.From True (Simple_Calculation.And True)) "Z" . at "Z" . to_vector . should_equal [True, True]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Or (Column_Ref.Name "T"))) "Z" . at "Z" . to_vector . should_equal [True, True]
            t.set (Simple_Expression.From False (Simple_Calculation.Or (Column_Ref.Name "A"))) "Z" . at "Z" . to_vector . should_equal [True, False]
            t.set (Simple_Expression.From False (Simple_Calculation.Or False)) "Z" . at "Z" . to_vector . should_equal [False, False]

            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Not) "Z" . at "Z" . to_vector . should_equal [False, True]
            t.set (Simple_Expression.From False Simple_Calculation.Not) "Z" . at "Z" . to_vector . should_equal [True, True]

            t.set (Simple_Expression.From 42 (Simple_Calculation.And True)) . should_fail_with Invalid_Value_Type
            Test.expect_panic Type_Error <| t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Or "x"))

        group_builder.specify "if" <|
            t = table_builder [["A", [1, 100]], ["B", [10, 40]], ["C", [23, 55]]]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than=(Column_Ref.Name "B")))) "Z" . at "Z" . to_vector . should_equal [False, True]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than=(Column_Ref.Name "B") Filter_Action.Remove))) "Z" . at "Z" . to_vector . should_equal [True, False]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than=20) "T" "F")) "Z" . at "Z" . to_vector . should_equal ["F", "T"]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Less than=20) (Column_Ref.Name "B") (Column_Ref.Name "C"))) "Z" . at "Z" . to_vector . should_equal [10, 55]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than="X") "T" "F")) . should_fail_with Invalid_Value_Type

            t2 = table_builder [["A", ["a", "c"]], ["B", ["c", "b"]], ["C", [23, 55]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than=(Column_Ref.Name "B")))) "Z" . at "Z" . to_vector . should_equal [False, True]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Greater than=(Column_Ref.Name "B")) (Column_Ref.Name "C") 0)) "Z" . at "Z" . to_vector . should_equal [0, 55]
            t2.set (Simple_Expression.From "A" (Simple_Calculation.If (Filter_Condition.Greater than="B") (Column_Ref.Name "C") 0)) "Z" . at "Z" . to_vector . should_equal [0, 0]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Equal_Ignore_Case "C") "==" "!=")) "Z" . at "Z" . to_vector . should_equal ["!=", "=="]

            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Is_In ["x", "a", "dd"]) "TT" "FF")) "Z" . at "Z" . to_vector . should_equal ["TT", "FF"]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Is_In []) "TT" "FF")) "Z" . at "Z" . to_vector . should_equal ["FF", "FF"]

            # Passing a column does not work row-by-row, but looks at whole column contents.
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Is_In (t2.at "B")) "TT" "FF")) "Z" . at "Z" . to_vector . should_equal ["FF", "TT"]
            t3 = table_builder [["x", ["e", "e", "a"]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Is_In (t3.at "x")) "TT" "FF")) "Z" . at "Z" . to_vector . should_equal ["TT", "FF"]

            # Thus, passing a Column_Ref into Is_In is not allowed as it would be confusing.
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.If (Filter_Condition.Is_In (Column_Ref.Name "B")) "TT" "FF")) . should_fail_with Illegal_Argument

        group_builder.specify "text" <|
            t = table_builder [["A", ["  a ", "b"]], ["B", ["c", " d    "]]]

            t.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Trim) "Z" . at "Z" . to_vector . should_equal ["a", "b"]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Trim Location.End)) "Z" . at "Z" . to_vector . should_equal ["  a", "b"]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Trim Location.Start)) "Z" . at "Z" . to_vector . should_equal ["a ", "b"]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Trim Location.Both "abc")) "Z" . at "Z" . to_vector . should_equal ["  a ", ""]
            t.set (Simple_Expression.From "bb aaaa" (Simple_Calculation.Trim Location.Both (Column_Ref.Name "A"))) "Z" . at "Z" . to_vector . should_equal ["bb", " aaaa"]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Add (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal ["  a c", "b d    "]
            t.set (Simple_Expression.From "prefix_" (Simple_Calculation.Add (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal ["prefix_c", "prefix_ d    "]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Add "!")) "Z" . at "Z" . to_vector . should_equal ["  a !", "b!"]
            t.set (Simple_Expression.From "O" (Simple_Calculation.Add "!")) "Z" . at "Z" . to_vector . should_equal ["O!", "O!"]

            t2 = table_builder [["A", [42]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") Simple_Calculation.Not) . should_fail_with Invalid_Value_Type

        group_builder.specify "min/max" <|
            t = table_builder [["A", [1, 20]], ["B", [10, 2]]]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal [1, 2]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min 5)) "Z" . at "Z" . to_vector . should_equal [1, 5]

            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Max (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal [10, 20]
            t.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Max 5)) "Z" . at "Z" . to_vector . should_equal [5, 20]

            t.set (Simple_Expression.From 2 (Simple_Calculation.Max 5)) "Z" . at "Z" . to_vector . should_equal [5, 5]
            t.set (Simple_Expression.From 2 (Simple_Calculation.Min 5)) "Z" . at "Z" . to_vector . should_equal [2, 2]

            t2 = table_builder [["A", ["aardvark", "zebra"]], ["B", ["cat", "dog"]], ["x", [1, 20]]]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal ["aardvark", "dog"]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Max (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal ["cat", "zebra"]
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min "animal")) "Z" . at "Z" . to_vector . should_equal ["aardvark", "animal"]
            t2.set (Simple_Expression.From "coyote" (Simple_Calculation.Max (Column_Ref.Name "B"))) "Z" . at "Z" . to_vector . should_equal ["coyote", "dog"]

            # mixed types result in an error
            t2.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min 42)) . should_fail_with Invalid_Value_Type
            t2.set (Simple_Expression.From (Column_Ref.Name "x") (Simple_Calculation.Min "x")) . should_fail_with Invalid_Value_Type
            t2.set (Simple_Expression.From (Column_Ref.Name "x") (Simple_Calculation.Min (Column_Ref.Name "A"))) . should_fail_with Invalid_Value_Type

            if pending_datetime.is_nothing then
                t3 = table_builder [["A", [Date.new 2002 12 10, Date.new 2005 01 01]]]
                t3.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Min (Date.new 2003))) "Z" . at "Z" . to_vector . should_equal [Date.new 2002 12 10, Date.new 2003 01 01]
                t3.set (Simple_Expression.From (Column_Ref.Name "A") (Simple_Calculation.Max (Date.new 2003))) "Z" . at "Z" . to_vector . should_equal [Date.new 2003 01 01, Date.new 2005 01 01]

        group_builder.specify "allows also indexing columns numerically" <|
            t = table_builder [["X", [1, 2]], ["Y", [3, 4]]]
            t.set (Simple_Expression.From (Column_Ref.Index 0) (Simple_Calculation.Add (Column_Ref.Index 1))) "Z" . at "Z" . to_vector . should_equal [4, 6]

        group_builder.specify "will forward column resolution errors" <|
            t = table_builder [["X", [1, 2]], ["Y", [3, 4]]]
            t.set (Simple_Expression.From (Column_Ref.Name "X") (Simple_Calculation.Add (Column_Ref.Name "Z"))) . should_fail_with No_Such_Column
            t.set (Simple_Expression.From (Column_Ref.Name "zzz") Simple_Calculation.Not) . should_fail_with No_Such_Column
            t.set (Simple_Expression.From (Column_Ref.Index 42) Simple_Calculation.Not) . should_fail_with Index_Out_Of_Bounds

    suite_builder.group prefix+"Unique derived column names" group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "Should not disambiguate two derived columns that would otherwise have had the same name, with Set_Mode.Add_Or_Update" <|
            t = table_builder [["X", [1, 2, 3]]]
            column_op = Simple_Expression.From 2 (Simple_Calculation.Power (Column_Ref.Name "X"))
            t2 = t.set column_op . set column_op
            t2.column_names . should_equal ["X", "[2] ^ [X]"]
            t2.at "X" . to_vector . should_equal [1, 2, 3]
            t2.at "[2] ^ [X]" . to_vector . should_equal [2, 4, 8]

        group_builder.specify "Should disambiguate two derived columns that would otherwise have had the same name, with Set_Mode.Add" <|
            t = table_builder [["X", [1, 2, 3]]]
            column_op = Simple_Expression.From 2 (Simple_Calculation.Power (Column_Ref.Name "X"))
            t2 = t.set column_op set_mode=Set_Mode.Add . set column_op set_mode=Set_Mode.Add
            t2.column_names . should_equal ["X", "[2] ^ [X]", "[2] ^ [X] 1"]
            t2.at "X" . to_vector . should_equal [1, 2, 3]
            t2.at "[2] ^ [X]" . to_vector . should_equal [2, 4, 8]
            t2.at "[2] ^ [X] 1" . to_vector . should_equal [2, 4, 8]

        group_builder.specify "Should disambiguate two derived columns that would otherwise have had the same name, within the same expression" <|
            t = table_builder [["X", [1, 2, 3]]]
            expression = "2 + (2 * 2) + (2 ^ [X])"
            t2 = t.set (expr expression)
            t2.column_names . should_equal ["X", expression]
            t2.at "X" . to_vector . should_equal [1, 2, 3]
            t2.at expression . to_vector . should_equal [8, 10, 14]

        group_builder.specify "Should use .pretty to distinguish string constants from regular column names" <|
            t = table_builder [["X", ["a", "b", "c"]]]
            expression = '"foo" + [X] + "bar"'
            t2 = t.set (expr expression)
            t2.column_names . should_equal ["X", expression]
            t2.at "X" . to_vector . should_equal ["a", "b", "c"]
            t2.at expression . to_vector . should_equal ["fooabar", "foobbar", "foocbar"]

        group_builder.specify "Should disambiguate between a column reference and a literal string" <|
            t = table_builder [["X", ["a", "b", "c"]]]
            t2 = t.set (Simple_Expression.From "prefix" (Simple_Calculation.Add (Column_Ref.Name "X")))
            t3 = t2.set (Simple_Expression.From "prefix" (Simple_Calculation.Add "X"))

            t3.column_names . should_equal ['X', "['prefix'] + [X]", "['prefix'] + 'X'"]
            t3.at "['prefix'] + [X]" . to_vector . should_equal ["prefixa", "prefixb", "prefixc"]
            t3.at "['prefix'] + 'X'" . to_vector . should_equal ["prefixX", "prefixX", "prefixX"]

        group_builder.specify "Should not disambiguate if set_mode is Update" <|
            t = table_builder [["X", [1, 2, 3]]]
            t2 = t.set (Simple_Expression.From (Column_Ref.Name "X") (Simple_Calculation.Add 1)) set_mode=Set_Mode.Update
            t2.column_names . should_equal ["X"]
            t2.at "X" . to_vector . should_equal [2, 3, 4]

        group_builder.specify "Should not disambiguate if set_mode is Add_Or_Update" <|
            t = table_builder [["X", [1, 2, 3]], ["[X] + 1", [10, 20, 30]]]
            # set_mode=Set_Mode.Add_Or_Update is the default
            t2 = t.set (Simple_Expression.From (Column_Ref.Name "X") (Simple_Calculation.Add 1))
            t2.column_names . should_equal ["X", "[X] + 1"]
            t2.at "X" . to_vector . should_equal [1, 2, 3]
            t2.at "[X] + 1" . to_vector . should_equal [2, 3, 4]

        group_builder.specify "Should not disambiguate if the new name is explicitly set" <|
            t = table_builder [["X", [1, 2, 3]]]
            t2 = t.set (Simple_Expression.From (Column_Ref.Name "X") (Simple_Calculation.Add 1)) as="X"
            t2.column_names . should_equal ["X"]
            t2.at "X" . to_vector . should_equal [2, 3, 4]
