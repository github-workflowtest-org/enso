from Standard.Base import all
from Standard.Table import Table

import Standard.Geo

from Standard.Test import all


add_specs suite_builder =
    suite_builder.group "Geo Points" group_builder->
        point = Geo.point 51.509865 -0.118092
        group_builder.specify "should be able to be created as a Table" <|
            is_table = case point of
                _ : Table -> True
                _ -> False
            is_table . should_be_true
        group_builder.specify "should contain a latitude and longitude" <|
            point.at "latitude" . at 0 . should_equal 51.509865
            point.at "longitude" . at 0 . should_equal -0.118092
            point.at "elevation" . at 0 . should_equal 0

    suite_builder.group "GeoJSON to Table" group_builder->
        geo_json = Json.parse <| '''
            {
              "type": "FeatureCollection",
              "features": [
                { "type": "Feature", "properties": { "foo": 1, "bar": "value2"}, "geometry": { "type": "Point", "coordinates": [ -118.58, 34.19 ] } },
                { "type": "Feature", "properties": { "foo": 2, "baz": 3}, "geometry": { "type": "Point", "coordinates": [ 10.11, 4.88, 19 ] } }
              ]
            }

        group_builder.specify "should allow converting a GeoJSON array of features into a table" <|
            fields = ['foo', 'bar', 'baz', 'longitude', 'elevation']
            t = Geo.geo_json_to_table (geo_json.get "features") fields
            t.columns.map .name . should_contain_the_same_elements_as fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'baz' . to_vector . should_equal [Nothing, 3]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]
            t.at 'elevation' . to_vector . should_equal [Nothing, 19]

        group_builder.specify "should allow converting a GeoJSON object into a table with provided fields" <|
            fields = ['foo', 'bar', 'longitude']
            t = Geo.geo_json_to_table geo_json fields
            t.columns.map .name . should_contain_the_same_elements_as fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]

        group_builder.specify "should allow converting a GeoJSON object into a table containing all available fields" <|
            fields = ['bar', 'baz', 'elevation', 'foo',  'latitude', 'longitude']
            t = Geo.geo_json_to_table geo_json
            t.columns.map .name . should_contain_the_same_elements_as fields
            t.at 'foo' . to_vector . should_equal [1, 2]
            t.at 'bar' . to_vector . should_equal ['value2', Nothing]
            t.at 'baz' . to_vector . should_equal [Nothing, 3]
            t.at 'longitude' . to_vector . should_equal [-118.58, 10.11]
            t.at 'latitude' . to_vector . should_equal [34.19, 4.88]
            t.at 'elevation' . to_vector . should_equal [Nothing, 19]
